@page "/"
@using Newtonsoft.Json.Linq;
@using System.Xml;
@using System.Xml.Linq;

@inject IJSRuntime JS
@inject IHttpClientFactory clientFactory
@inject DialogService DialogService
@inject IStringLocalizer<CommonResources> cl
@inject MapState MapState
@inject IHttpContextAccessor httpContextAccesor

<div title="@cl["mapTitle"]" @onclick="ShowPlaceInfo" id="map" style="cursor:default"></div>
<Search Order=1 />
<Timeline Order=2 />
<Layers Order=3 />
<Help Order=4 />
<Language Order=5 />
<Home Order=6 />
<Zoom/>

@code {
    protected override void OnInitialized()
    {
        DialogService.OnClose += RemoveObjects;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        base.OnAfterRender(firstRender);

        if (firstRender)
        {
            if (!MapState.MapStateWasInit)
            {
                string layers = await JS.InvokeAsync<string>("mapAPI.getUrlParam", "layers");
                string collectionName = await JS.InvokeAsync<string>("mapAPI.getUrlParam", "collection");
                MapState.Init(layers, collectionName);
            }
            await JS.InvokeVoidAsync("mapAPI.initMap", MapState.GetAllMapsInfoForLeaflet());
            MapState.WindowHeight = await JS.InvokeAsync<int>("mapAPI.getWindowHeight");
            MapState.WindowWidth = await JS.InvokeAsync<int>("mapAPI.getWindowWidth");
            MapState.IsMobileBrowser = await JS.InvokeAsync<bool>("mapAPI.isMobileBrowser");
        }
    }

    public void RemoveObjects(dynamic obj)
    {
        if (!MapState.IsMobileBrowser)
            JS.InvokeVoidAsync("mapAPI.removeObjects");
    }

    protected async Task ShowPlaceInfo(MouseEventArgs e)
    {
        if ((await JS.InvokeAsync<int>("mapAPI.getIsDragging")) > 0)
            return;

        try
        {
            MapState.WindowHeight = await JS.InvokeAsync<int>("mapAPI.getWindowHeight");
            MapState.WindowWidth = await JS.InvokeAsync<int>("mapAPI.getWindowWidth");

            string bbox = await JS.InvokeAsync<string>("mapAPI.convertMousePositionToBBoxParameter");
            // tuhle blbost tu dělám proto, že QGIS server neumí vracet anglické popisky v json, ale jenom v xml...
            string urlJson = MapState.GetFeaturesInfoUrl("application/json") + bbox;
            string urlXML = MapState.GetFeaturesInfoUrl("text/xml") + bbox;
            string responseJson = await clientFactory.CreateClient().GetStringAsync(urlJson + bbox);
            string responseXML = await clientFactory.CreateClient().GetStringAsync(urlXML + bbox);

            await JS.InvokeVoidAsync("mapAPI.addObjectsFromJsonString", responseJson);

            XDocument xdoc = XDocument.Parse(responseXML);

            var response = new WMSResponse(responseXML);

            var placeInfos = ConvertXDocToPlaceInfo(xdoc);
            if (placeInfos == null || placeInfos.Count() == 0)
                return;

            await DialogService.OpenSideAsync<PlaceInformation>(cl["placeInfo"], parameters: new Dictionary<string, object> { { "PlaceInfos", placeInfos } }, options: MapState.GetDialogOptions());
        }
        catch
        {

        }
    }

    private List<WMSPlaceInfo>? ConvertXDocToPlaceInfo(XDocument xdoc)
    {
        if (xdoc == null)
            return null;

        var placeInfos = xdoc.Descendants("Feature").
            Select(f => new WMSPlaceInfo
                {
                    Properties = f.Elements("Attribute").Where(a => a.Attribute("type")?.Value != "derived" && a.Attribute("value")?.Value != "NULL").Select(a => new KeyValuePair<string, string>(a.Attribute("name").Value, a.Attribute("value").Value)).ToList()
                }).ToList();

        return placeInfos;
    }
}