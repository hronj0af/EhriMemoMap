@page "/"

@using NetTopologySuite.Geometries;
@using Newtonsoft.Json.Linq;
@using System.Xml;
@using System.Xml.Linq;

@inject IJSRuntime JS
@inject IHttpClientFactory clientFactory
@inject DialogService DialogService
@inject IStringLocalizer<CommonResources> cl
@inject MapStateService MapState
@inject MapLogicService MapLogic
@inject IHttpContextAccessor httpContextAccesor
@inject EhriMemoMap.Data.MemogisContext context

<div id="map" style="cursor:default"></div>

<Home VerticalPosition="VerticalPositionEnum.Top" HorizontalPosition="HorizontalPositionEnum.Right" Order="0" />
<Search VerticalPosition="VerticalPositionEnum.Top" HorizontalPosition="HorizontalPositionEnum.Right" Order="1" />
<Timeline VerticalPosition="VerticalPositionEnum.Top" HorizontalPosition="HorizontalPositionEnum.Right" Order="2" />
<Layers VerticalPosition="VerticalPositionEnum.Top" HorizontalPosition="HorizontalPositionEnum.Right" Order="3" />
<Help VerticalPosition="VerticalPositionEnum.Top" HorizontalPosition="HorizontalPositionEnum.Right" Order="4" />
<Language VerticalPosition="VerticalPositionEnum.Top" HorizontalPosition="HorizontalPositionEnum.Right" Order="5" />
<Zoom VerticalPosition="VerticalPositionEnum.Bottom" HorizontalPosition="HorizontalPositionEnum.Left" Order="0" />
<LayersQuickAccess/>

@code {
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        base.OnAfterRender(firstRender);

        if (firstRender)
        {
            // musím do javascriptu šoupnout odkaz na instanci téhle třídy Map,
            // abych pak mohl z javascriptu volat metodu RefreshObjectsOnMap a ShowPlaceInfo
            var dotNetReference = DotNetObjectReference.Create(this);
            await JS.InvokeVoidAsync("mapAPI.initBlazorMapObject", dotNetReference);

            if (!MapState.MapStateWasInit)
            {
                string layers = await JS.InvokeAsync<string>("mapAPI.getUrlParam", "layers");
                string timelinePointName = await JS.InvokeAsync<string>("mapAPI.getUrlParam", "timeline");
                MapState.IsMobileBrowser = await JS.InvokeAsync<bool>("mapAPI.isMobileBrowser");
                MapState.Init(layers, timelinePointName);
            }

            await JS.InvokeVoidAsync("mapAPI.initMap", MapState.GetMapInfoForLeaflet());

            MapState.MapZoom = await JS.InvokeAsync<int>("mapAPI.getZoom");
            MapState.SetBBox(await JS.InvokeAsync<Coordinate[]>("mapAPI.getMapBoundsForMapState"));

            await MapLogic.RefreshObjectsOnMap(true);
        }
    }

    /// <summary>
    /// Tahle metoda na obnovení špendlíků a polygonů na mapě se volá vždycky z javascriptu, když se s mapou nějak pohne,
    // protože tady v aplikaci nemám spolehlivý přehled o tom, kdy se mapa někam pohne, nebo zazoomuje
    /// </summary>
    /// <returns></returns>
    [JSInvokable("RefreshObjectsOnMap")]
    public async Task RefreshObjectsOnMap(bool withPolygons, int zoom, Coordinate[] mapBounds)
    {
        MapState.MapZoom = zoom;
        MapState.SetBBox(mapBounds);
        await MapLogic.RefreshObjectsOnMap(withPolygons);
    }

    public void RemoveObjects(dynamic obj)
    {
        if (!MapState.IsMobileBrowser)
            JS.InvokeVoidAsync("mapAPI.removeAdditionalObjects");
    }

    [JSInvokable("ShowPlaceInfo")]
    public async Task ShowPlaceInfo(int zoom, Coordinate[] coordinates)
    {
        var placesOnMap = MapLogic.GetMapObjects(true, coordinates);

        var serializerSettings = new JsonSerializerSettings
            {
                ContractResolver = new CamelCasePropertyNamesContractResolver()
            };
        var mapLocationJson = JsonConvert.SerializeObject(new { type = "Point", coordinates = new double[] { coordinates[0].X, coordinates[1].Y } }, serializerSettings);
        MapState.SetDialogIsOpen(true);
        await DialogService.OpenSideAsync<PlaceInformation>(null, new Dictionary<string, object> { { "Places", placesOnMap } }, MapState.GetDialogOptions());
    }

}