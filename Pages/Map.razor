@page "/"

@using EhriMemoMap.Helpers
@using NetTopologySuite.Geometries;
@using Newtonsoft.Json.Linq;
@using System.Xml;
@using System.Xml.Linq;

@inject IJSRuntime JS
@inject IHttpClientFactory clientFactory
@inject DialogService DialogService
@inject IStringLocalizer<CommonResources> cl
@inject MapStateService MapState
@inject MapLogicService MapLogic
@inject IHttpContextAccessor httpContextAccesor
@inject EhriMemoMap.Data.MemogisContext context

<div id="map" style="cursor:default;">
    <!-- TOTO JE FILTR, KTERÝ SE POUŽÍVÁ PRO HEZČÍ VYKRESLENÍ HRANIC OKRESŮ, 
         RESP. CELÉ PRAHY (viz soubor site.css, řádek div.leaflet-overlay-pane svg > g path.statistics-polygon) -->
    <svg xmlns="w3.org/2000/svg" ; version="1.1">
        <defs>
            <filter id='inset-shadow'>
                <feOffset dx='0' dy='0' />
                <!-- Shadow blur -->
                <feGaussianBlur stdDeviation='5' result='offset-blur' />
                <!-- Invert drop shadow to make an inset shadow -->
                <feComposite operator='out' in='SourceGraphic' in2='offset-blur' result='inverse' />
            </filter>
            @* Toto je filtr, který navrhl grafik Adam Gratz, ale nějak mi nefunguje, takže jsem ho zatím zakomentoval *@
@*             <filter id="inset-shadow2" x="0" y="0" filterUnits="userSpaceOnUse" color-interpolation-filters="sRGB">
                <feFlood flood-opacity="0" result="BackgroundImageFix" />
                <feBlend mode="normal" in="SourceGraphic" in2="BackgroundImageFix" result="shape" />
                <feColorMatrix in="SourceAlpha" type="matrix" values="0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 127 0" result="hardAlpha" />
                <feOffset />
                <feGaussianBlur stdDeviation="30" />
                <feComposite in2="hardAlpha" operator="arithmetic" k2="-1" k3="1" />
                <feColorMatrix type="matrix" values="0 0 0 0 0.109804 0 0 0 0 0.388235 0 0 0 0 0.47451 0 0 0 1 0" />
                <feBlend mode="normal" in2="shape" result="effect1_innerShadow_1935_364" />
            </filter>
 *@


        </defs>
    </svg>
</div>

<ControlButtonsWrapper />
<ZoomButtonsWrapper />
@if (isMobileView == false)
{
    <LayersQuickAccess />
    <TimelineWrapper />
}
else if (isMobileView == true)
{
    <MobileTopBarWrapper />
}



@code {
    bool? isMobileView = null;
    bool firstRender = true;
    string? selectedPointGuidsJson;


    /// <summary>
    /// Initialiazece mapy se děje až po prvním renderu, protože až v tomto okamžiku mám k dispozici všechny potřebné informace
    /// </summary>
    /// <param name="firstRender"></param>
    /// <returns></returns>
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        this.firstRender = firstRender;

        if (firstRender && !MapState.MapStateWasInit)
        {
            // musím do javascriptu šoupnout odkaz na instanci téhle třídy Map,
            // abych pak mohl z javascriptu volat metodu RefreshObjectsOnMap a ShowPlaceInfo
            var dotNetReference = DotNetObjectReference.Create(this);
            await JS.InvokeVoidAsync("mapAPI.initBlazorMapObject", dotNetReference);

            // získám parametry z url o vrstvách, bodu na časové ose a ohraničení mapy
            string layers = await JS.InvokeAsync<string>("mapAPI.getUrlParam", "layers");
            string timelinePointName = await JS.InvokeAsync<string>("mapAPI.getUrlParam", "timeline");
            string? bounds = await JS.InvokeAsync<string>("mapAPI.getUrlParam", "bounds");

            // zjistím, jestli se jedná o mobilní zařízení
            MapState.IsMobileView = await JS.InvokeAsync<bool>("mapAPI.isMobileView");
            isMobileView = MapState.IsMobileView;

            // inicializace hlavního objektu mapy
            // pokud jsou v url parametry layers a timeline, tak se použijí, jinak se použijí defaultní hodnoty
            MapState.Init(layers, timelinePointName);

            // voláme javascriptovou metodu leafletu, která inicializuje mapu
            // jako parametr předám informace o vrstvách a počátečním zobrazení mapy
            await JS.InvokeVoidAsync("mapAPI.initMap", MapState.GetMapInfoForLeaflet());

            // tady se zjistí šířka a výška okna kvůli zobrazení dialogového okna s dalšími informacemi
            MapState.WindowWidth = await JS.InvokeAsync<int>("mapAPI.getWindowWidth");
            MapState.WindowHeight = await JS.InvokeAsync<int>("mapAPI.getWindowHeight");

            // tady se zase zjistí, jak je velká oblast, která se zobrazuje na mapě
            MapState.MapZoom = await JS.InvokeAsync<int>("mapAPI.getZoom");
            MapState.SetBBox(await JS.InvokeAsync<Coordinate[]>("mapAPI.getMapBoundsForMapState"));

            // a posledně zmiňované informace se pak použijí pro zobrazení špendlíků a polygonů na mapě
            await MapLogic.RefreshObjectsOnMap(true);

            // pokud není v url parametr bounds (uživatel s mapou ještě nezačal pracovat), 
            // tak se zobrazí dialog s vysvětlením, jak se v mapě pohybovat
            // pokud už s mapou začal pracovat, tak ho s tímto uvítacím dialogem nebudeme otravovat
            if (string.IsNullOrEmpty(bounds))
                if (!MapState.IsMobileView)
                    DialogService.Open<WelcomeDialog>(" ", options: new DialogOptions { ShowClose = false, ShowTitle = false, CloseDialogOnOverlayClick = true, Width = "33%" });
                else
                {
                    MapState.SetDialogType(DialogTypeEnum.Welcome);
                    await DialogService.OpenSideAsync<WelcomeDialog>(" ", options: await MapState.GetDialogOptions());
                }

            StateHasChanged();
        }

    }

    [JSInvokable("SetMobileView")]
    public void SetMobileView(bool value)
    {
        MapState.IsMobileView = value;
        isMobileView = value;
        MapState.NotifyStateChanged();
        StateHasChanged();
    }

    /// <summary>
    /// Tahle metoda na obnovení špendlíků a polygonů na mapě se volá vždycky z javascriptu, když se s mapou nějak pohne,
    /// protože tady v aplikaci nemám spolehlivý přehled o tom, kdy se mapa někam pohne, nebo zazoomuje
    /// </summary>
    /// <returns></returns>
    [JSInvokable("RefreshObjectsOnMap")]
    public async Task RefreshObjectsOnMap(bool withPolygons, int zoom, Coordinate[] mapBounds)
    {
        MapState.MapZoom = zoom;
        MapState.SetBBox(mapBounds);
        await MapLogic.RefreshObjectsOnMap(withPolygons);
        if (!string.IsNullOrEmpty(selectedPointGuidsJson))
            await JS.InvokeVoidAsync("mapAPI.selectPointOnMap", selectedPointGuidsJson);
    }

    public void RemoveObjects(dynamic obj)
    {
        if (!MapState.IsMobileView)
            JS.InvokeVoidAsync("mapAPI.removeAdditionalObjects");
    }

    [JSInvokable("ShowPlaceInfo")]
    public async Task ShowPlaceInfo(int zoom, Coordinate[] coordinates)
    {
        var placesOnMap = MapLogic.GetMapObjects(true, coordinates);
        if (placesOnMap.Count == 0)
            return;

        selectedPointGuidsJson = JsonConvert.SerializeObject(placesOnMap.Select(a => a.Guid).ToArray());

        var serializerSettings = new JsonSerializerSettings
            {
                ContractResolver = new CamelCasePropertyNamesContractResolver()
            };
        
        var mapLocationJson = JsonConvert.SerializeObject(new { type = "Point", coordinates = new double[] { coordinates[0].X, coordinates[1].Y } }, serializerSettings);
        
        MapState.SetDialogType(DialogTypeEnum.Place);
        DialogService.OpenSideAsync<PlaceDialog>(null, new Dictionary<string, object> { { "Places", placesOnMap } }, await MapState.GetDialogOptions());
        
        if (MapState.IsMobileView)
            await JS.InvokeVoidAsync("mapAPI.goToLocation", coordinates.AsJson(), zoom);


    }

}