@inject IJSRuntime JS
@inject IHttpClientFactory clientFactory
@inject DialogService DialogService
@inject MapState MapState
@inject IStringLocalizer<CommonResources> cl


@if (collections != null && collections.Count > 1)
{
    <RadzenButton Style="@style.ButtonStyle" title="@(cl["timeline"] + "...")" ButtonStyle="ButtonStyle.Dark" Variant="Variant.Filled" Click="(() => MapState.IsTimelineOpen = !MapState.IsTimelineOpen)"><RadzenIcon Icon="lock_clock" /></RadzenButton>

    @if (MapState.IsTimelineOpen)
    {
        <RadzenCard Style="@style.BoxStyle">
            <RadzenRow>
                @foreach (var group in collections.GroupBy(a => a.Year).OrderBy(a => a.Key))
                {
                    <RadzenColumn Size="MapState.IsMobileBrowser ? 4 : null">
                        <span><b>@group.Key</b></span><br />
                        @foreach (var item in group)
                        {
                            <RadzenButton class="rz-mb-1" ButtonStyle="item.Selected ? ButtonStyle.Dark : ButtonStyle.Secondary" Shade="Shade.Light" Size="ButtonSize.Small" Variant="Variant.Flat" Click="(() => OnCollectionClick(item))">@item.Title</RadzenButton>
                        }
                    </RadzenColumn>
                }
            </RadzenRow>
        </RadzenCard>
    }
}
@code {
    (string ButtonStyle, string BoxStyle) style;

    [Parameter]
    public int Order { get; set; }

    [Parameter]
    public PositionEnum Position { get; set; }


    List<CollectionModel> collections;

    protected override async Task OnInitializedAsync()
    {
        var width = await JS.InvokeAsync<int>("mapAPI.getWindowWidth");
        style = await MapState.GetStyleOfMapComponent(Position, Order, width);
        collections = MapState.GetAllCollections();
        MapState.OnChange += OnMyChangeHandler;
    }

    public void Dispose()
    {
        MapState.OnChange -= OnMyChangeHandler;
    }

    private async void OnMyChangeHandler()
    {
        await InvokeAsync(() =>
        {
            collections = MapState.GetAllCollections();
            StateHasChanged();
        });
    }

    private async Task OnCollectionClick(CollectionModel collection)
    {
        if (collection.Selected)
            return;
        MapState.SetInfoAboutCollectionSelection(collection);
        var serializerSettings = new JsonSerializerSettings();
        serializerSettings.ContractResolver = new CamelCasePropertyNamesContractResolver();
        string layerJson = JsonConvert.SerializeObject(MapState.GetMapInfoForLeafletLayer(collection.MapName), serializerSettings);
        await JS.InvokeVoidAsync("mapAPI.changeLayer", layerJson);
        await JS.InvokeVoidAsync("mapAPI.setUrlParam", "collection", MapState.GetCollectionForUrlParameter());
    }

}
