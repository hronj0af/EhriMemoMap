@inject IJSRuntime JS
@inject IHttpClientFactory clientFactory
@inject DialogService DialogService
@inject MapLogicService MapLogic
@inject MapStateService MapState
@inject IStringLocalizer<CommonResources> cl


@if (timeline != null && timeline.Count > 1)
{
    <RadzenButton Style="@style.ButtonStyle" title="@(cl["timeline"] + "...")" ButtonStyle="ButtonStyle.Dark" Variant="Variant.Filled" Click="(() => MapState.IsTimelineOpen = !MapState.IsTimelineOpen)"><RadzenIcon Icon="lock_clock" /></RadzenButton>

    @if (MapState.IsTimelineOpen)
    {
        <RadzenCard Style="@style.BoxStyle">
            <RadzenRow>
                @foreach (var group in timeline.GroupBy(a => a.To?.Year).OrderBy(a => a.Key))
                {
                    <RadzenColumn Size="MapState.IsMobileBrowser ? 4 : null">
                        <span><b>@group.Key</b></span><br />
                        @foreach (var item in group)
                        {
                            <RadzenButton class="rz-mb-1" ButtonStyle="item.Selected ? ButtonStyle.Dark : ButtonStyle.Secondary" Shade="Shade.Light" Size="ButtonSize.Small" Variant="Variant.Flat" Click="(() => OnCollectionClick(item))">@item.Title</RadzenButton>
                        }
                    </RadzenColumn>
                }
            </RadzenRow>
        </RadzenCard>
    }
}
@code {
    (string ButtonStyle, string BoxStyle) style;

    [Parameter]
    public int Order { get; set; }

    [Parameter]
    public PositionEnum Position { get; set; }


    List<TimelinePointModel>? timeline;

    protected override async Task OnInitializedAsync()
    {
        var width = await JS.InvokeAsync<int>("mapAPI.getWindowWidth");
        style = await MapState.GetStyleOfMapComponent(Position, Order, width);
        timeline = MapState.GetTimeline();
        MapState.OnChange += OnMyChangeHandler;
    }

    public void Dispose()
    {
        MapState.OnChange -= OnMyChangeHandler;
    }

    private async void OnMyChangeHandler()
    {
        await InvokeAsync(() =>
        {
            timeline = MapState.GetTimeline();
            StateHasChanged();
        });
    }

    private async Task OnCollectionClick(TimelinePointModel point)
    {
        if (point.Selected)
            return;

        MapState.ToggleTimeLinePoint(point);

        await MapLogic.RefreshObjectsOnMap(false);
        //await JS.InvokeVoidAsync("mapAPI.setUrlParam", "timeline", MapState.GetTimelineForUrlParameter());
    }

}
