@using EhriMemoMap.Helpers;
@inject SolrService solr
@inject IJSRuntime JS
@inject MapStateService MapState
@inject IStringLocalizer<CommonResources> cl
@inject DialogService DialogService
<DialogButtons />

<div class="rz-p-6">
    <h1 class="rz-pb-4" style="color:var(--Wine-Red)">@cl["search"]</h1>
    <RadzenStack Orientation="Orientation.Vertical" AlignItems="AlignItems.End">
        <RadzenTextBox Change="LoadData" @bind-Value=@MapState.SearchedPlaceString Style="width:100%;box-sizing: border-box;">
        </RadzenTextBox>
        <RadzenButton ButtonStyle="ButtonStyle.Primary" Variant="Variant.Outlined" Click="LoadData">
            @cl["search"]
        </RadzenButton>
    </RadzenStack>

    @if (MapState.SearchedPlaces != null)
    {
        <div class="rz-py-4" style="font-size:18px;color:var(--Wine-Red);font-family:'Barlow Bold';">
            @cl["resultsFor"]: "@(MapState.SearchedPlaceString)"
        </div>

        @foreach (var placeGroup in MapState.SearchedPlaces.GroupBy(a=>a.Type))
        {
            <h2 class="rz-py-5" style="cursor:pointer;color:var(--Wine-Red)" onclick="@(() => TogglePlaceType(placeGroup.Key))">
                @cl["featureType_" + placeGroup.Key]
                @if (!openedTypes.Any(a => a == placeGroup.Key))
                {
                    <RadzenImage Style="height:17px;cursor:pointer" class="rz-pl-3" Path="images/arrow-right.png" title="@(cl["showStatistics"] + "...")"></RadzenImage>
                }
                else
                {
                    <RadzenImage Style="width:17px;cursor:pointer" class="rz-pl-2" Path="images/arrow-down.png" title="@(cl["hideStatistics"] + "...")"></RadzenImage>
                }
            </h2>
            <div style="@(!openedTypes.Any(a=>a == placeGroup.Key) ? "display:none" : "")">
                @foreach (var place in placeGroup)
                {
                    <RadzenRow class="rz-pt-4" RowGap="0" onclick="@(() => ShowPlace(place))" style="cursor:pointer">
                        <RadzenColumn Size="1">
                            <RadzenImage style="height:25px" Path="@("images/" + place.Type + "-wine.svg")"></RadzenImage>
                        </RadzenColumn>
                        <RadzenColumn Size="11">
                            <h3 class="rz-mb-1">
                                @if (CultureInfo.CurrentCulture.ToString() == "cs-CZ")
                                {
                                    @place.LabelCs
                                }
                                else
                                {
                                    @place.LabelEn
                                }
                            </h3>
                            @if (place.Date != null)
                            {
                                <h5>@place.Date?.ToString("d. M. yyyy")</h5>
                            }
                            @if (place.PlaceCs != null)
                            {
                                <span style="font-size:14px">@place.PlaceCs</span>
                            }
                        </RadzenColumn>

                    </RadzenRow>

                }
                </div>
        }

    }



</div>


@code {
    private List<string> openedTypes = new List<string>();

    public async Task ShowPlace(Place place)
    {
        if (place != null)
        {
            var zoom = 15;
            if (place.MapObject == null || !place.MapObject.Contains("Polygon"))
                zoom = 18;
            await JS.InvokeVoidAsync("mapAPI.goToLocation", place.MapLocation, zoom);
            await JS.InvokeVoidAsync("mapAPI.addObjectFromJsonString", place.MapLocation);
        }
        else
            await JS.InvokeVoidAsync("mapAPI.removeAdditionalObjects");

    }

    async Task LoadData()
    {
        MapState.SearchedPlaces = await solr.SolrExecuteDocument(MapState.SearchedPlaceString);

        openedTypes = new List<string>();
        foreach (var placeGroup in MapState.SearchedPlaces.GroupBy(a => a.Type))
            if (!openedTypes.Any(a => a == placeGroup.Key))
                openedTypes.Add(placeGroup.Key);

        await InvokeAsync(StateHasChanged);
    }

    public async Task ShowPlace()
    {
        var place = MapState.SearchedPlaces.FirstOrDefault(a => CultureInfo.CurrentCulture.ToString() == "cs-CZ" ? a.DropDownInfoCs == MapState.SearchedPlaceString : a.DropDownInfoEn == MapState.SearchedPlaceString);
        await ShowPlace(place);
    }

    private async void OnMyChangeHandler()
    {
        await InvokeAsync(() =>
        {
            if (MapState.DialogType != DialogTypeEnum.Search)
            {
                JS.InvokeVoidAsync("mapAPI.removeAdditionalObjects");
                MapState.SearchedPlaceString = "";
            }
            StateHasChanged();
        });
    }

    private void TogglePlaceType(string placeType)
    {
        if (openedTypes.Any(a => a == placeType))
            openedTypes.Remove(placeType);
        else
            openedTypes.Add(placeType);
        StateHasChanged();
    }
}
