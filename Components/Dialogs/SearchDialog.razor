@using EhriMemoMap.Helpers;
@inject SolrService solr
@inject IJSRuntime JS
@inject MapStateService MapState
@inject IStringLocalizer<CommonResources> cl

<DialogButtons />

<RadzenAutoComplete Change="@ShowPlace" @bind-Value=@selectedPlaceName Data=@places TextProperty="@(CultureInfo.CurrentCulture == new CultureInfo("cs-CZ") ? "DropDownInfoCs" : "DropDownInfoEn")" LoadData=@LoadData>
    <Template>
        <span onclick="@(() => ShowPlace((Place)context))">
            @if (CultureInfo.CurrentCulture == new CultureInfo("cs-CZ"))
            {
                @context.DropDownInfoCs
            }
            else
            {
                @context.DropDownInfoEn
            }
        </span>
    </Template>
</RadzenAutoComplete>


@code {

    string selectedPlaceName;
    IEnumerable<Place> places;

    public async Task ShowPlace(Place place)
    {
        if (place != null)
        {
            var zoom = 15;
            if (place.MapObject == null || !place.MapObject.Contains("Polygon"))
                zoom = 18;
            await JS.InvokeVoidAsync("mapAPI.goToLocation", place.MapLocation, zoom);
            await JS.InvokeVoidAsync("mapAPI.addObjectFromJsonString", place.MapLocation);
        }
        else
            await JS.InvokeVoidAsync("mapAPI.removeAdditionalObjects");

    }

    async Task LoadData(LoadDataArgs args)
    {
        places = await solr.SolrExecuteDocument(args.Filter);
        await InvokeAsync(StateHasChanged);
    }

    public async Task ShowPlace()
    {
        var place = places.FirstOrDefault(a => CultureInfo.CurrentCulture == new CultureInfo("cs-CZ") ? a.DropDownInfoCs == selectedPlaceName : a.DropDownInfoEn == selectedPlaceName);
        await ShowPlace(place);
    }

    private async void OnMyChangeHandler()
    {
        await InvokeAsync(() =>
        {
            if (MapState.DialogType != DialogTypeEnum.Search)
            {
                JS.InvokeVoidAsync("mapAPI.removeAdditionalObjects");
                selectedPlaceName = "";
            }
            StateHasChanged();
        });
    }


}
