@inject IHttpClientFactory clientFactory
@inject DialogService DialogService
@inject MapLogicService MapLogic
@inject MapStateService MapState
@inject IStringLocalizer<CommonResources> cl
@inject IJSRuntime JS
@inject TooltipService tooltipService


@if (timeline != null && timeline.Any(a => a.From != null && a.To != null))
{
    <RadzenStack Orientation="Orientation.Horizontal" Gap="0" AlignItems="AlignItems.Start" class="timeline-inner-wrapper" >
        @if (!MobileVersion)
        {
            <div class="timeline-firstcolumn" style="height:@(height - 10)px;width:@(Width - timelineWidth)px;">
                <h4 class="rz-mb-2">@cl["timeline"]</h4>
                @if (timeline.Any(a => a.From == null && a.To == null))
                {
                    <RadzenButton Size="ButtonSize.ExtraSmall" Click="(() => OnCollectionClick(timeline.FirstOrDefault(a => a.From == null && a.To == null)))" ButtonStyle="ButtonStyle.Secondary" Variant="Variant.Outlined">
                        @cl["all"]
                    </RadzenButton>
                }
            </div>
        }

        <RadzenCard class="timeline" Style="@timelineStyle">
            <div class="timeline-baseline"></div>
            @{
                var margin = 25;
                var step = (timelineWidth - 2 * margin) / (timeline.Count(a => a.From != null && a.To != null) - 1);
                var left = margin;
                var year = timeline.FirstOrDefault()?.From?.Year;
            }
            @foreach (var point in timeline.Where(a => a.From != null && a.To != null))
            {
                if (point.From?.Year != year)
                {
                    year = point.From?.Year;
                    <div class="timeline-point" @onclick="() => OnCollectionClick(point)" style="left:@(left)px">
                        <div class="timeline-year-point"></div>
                    </div>
                    <div @onclick="() => OnCollectionClick(point)" style="position:absolute;left:@(left - 25)px" class="@(!point.Selected ? "timeline-tooltip" : "timeline-tooltip-selected")">
                        <img src="/images/tooltip.svg" />
                        <div class="timeline-tooltip-text">
                            @point.Title
                        </div>
                    </div>
                    <div class="timeline-year-label" style="left:@(left - 12)px">@year</div>
                }
                else
                {
                    <div class="timeline-point" @onclick="() => OnCollectionClick(point)" style="left:@(left)px">
                        <div class="timeline-quarter-point"></div>
                    </div>
                    <div @onclick="() => OnCollectionClick(point)" style="left:@(left - 25)px" class="@(!point.Selected ? "timeline-tooltip" : "timeline-tooltip-selected")">
                        <img src="/images/tooltip.svg" />
                        <div class="timeline-tooltip-text">
                            @point.Title
                        </div>
                    </div>
                }
                left += step;
            }
        </RadzenCard>

    </RadzenStack>

    @if (MobileVersion && timeline.Any(a => a.From == null && a.To == null))
    {
        <div>
            <RadzenButton Click="(() => OnCollectionClick(timeline.FirstOrDefault(a => a.From == null && a.To == null)))" ButtonStyle="ButtonStyle.Primary" Variant="Variant.Outlined" class="rz-mt-4" Style="@("width:" + timelineWidth + "px")">
                @cl["all"]
            </RadzenButton>
        </div>
    }

}
@code {

    [Parameter]
    public int Width { get; set; }

    [Parameter]
    public bool MobileVersion { get; set; } = false;

    List<TimelinePointModel>? timeline;
    string? timelineStyle;
    int height = 72;
    int timelineWidth;
    int firstColumnWidth = 100;

    protected override void OnInitialized()
    {
        timelineWidth = MobileVersion ? Width : Width - firstColumnWidth;
        timelineStyle = $"background-color: var(--Grey);position: relative;width:{timelineWidth}px;height:{height}px;";
    }

    private async Task OnCollectionClick(TimelinePointModel point)
    {
        if (point.Selected)
            return;

        MapState.ToggleTimeLinePoint(point);

        await MapLogic.RefreshObjectsOnMap(false);
        await JS.InvokeVoidAsync("mapAPI.setUrlParam", "timeline", MapState.GetTimelineForUrlParameter());
    }


    protected override async Task OnInitializedAsync()
    {
        timeline = MapState.GetTimeline();
        MapState.OnChange += OnMyChangeHandler;
        StateHasChanged();
    }

    public void Dispose()
    {
        MapState.OnChange -= OnMyChangeHandler;
    }

    private async void OnMyChangeHandler()
    {
        await InvokeAsync(() =>
        {
            timeline = MapState.GetTimeline();
            StateHasChanged();
        });
    }


}