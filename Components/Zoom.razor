@using EhriMemoMap.Helpers;
@inject IJSRuntime JS
@inject IHttpClientFactory clientFactory
@inject DialogService DialogService
@inject MapStateService MapState
@inject IStringLocalizer<CommonResources> cl

<RadzenButton Style="@styleLocation.ButtonStyle" title="@((myLocationIsVisible ? cl["myLocationOff"] : cl["myLocationOn"]) + "...")" ButtonStyle="ButtonStyle.Dark" Variant="Variant.Filled" Click="(() => ToggleMyLocationVisibility())">
    @if (myLocationIsVisible)
    {
        <RadzenIcon Icon="my_location" />
    }
    else 
    {
        <RadzenIcon Icon="location_searching" />
    }
</RadzenButton>
<RadzenButton Style="@styleZoomIn.ButtonStyle" title="@(cl["zoomIn"] + "...")" ButtonStyle="ButtonStyle.Dark" Variant="Variant.Filled" Click="(() => ZoomIn())"><RadzenIcon Icon="add" /></RadzenButton>
<RadzenButton Style="@styleZoomOut.ButtonStyle" title="@(cl["zoomOut"] + "...")" ButtonStyle="ButtonStyle.Dark" Variant="Variant.Filled" Click="(() => ZoomOut())"><RadzenIcon Icon="remove" /></RadzenButton>

@code {
    [Parameter]
    public int Order { get; set; }

    [Parameter]
    public PositionEnum Position { get; set; }

    (string ButtonStyle, string BoxStyle) styleLocation;
    (string ButtonStyle, string BoxStyle) styleZoomIn;
    (string ButtonStyle, string BoxStyle) styleZoomOut;
    private bool myLocationIsVisible = false;

    protected override async Task OnInitializedAsync()
    {
        styleZoomOut = await MapState.GetStyleOfMapComponent(Position, Order);
        styleZoomIn = await MapState.GetStyleOfMapComponent(Position, Order + 1);
        styleLocation = await MapState.GetStyleOfMapComponent(Position, Order + 2);

    }


    private async Task ToggleMyLocationVisibility()
    {
        myLocationIsVisible = !myLocationIsVisible;
        
        if (myLocationIsVisible)
            await JS.InvokeVoidAsync("mapAPI.showMyLocation");
        else
            await JS.InvokeVoidAsync("mapAPI.hideMyLocation");
    }

    private async Task ZoomIn()
    {
        await JS.InvokeVoidAsync("mapAPI.map.zoomIn");
    }

    private async Task ZoomOut()
    {
        await JS.InvokeVoidAsync("mapAPI.map.zoomOut");
    }
}
