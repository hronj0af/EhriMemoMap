@using EhriMemoMap.Helpers;
@inject IJSRuntime JS
@inject IHttpClientFactory clientFactory
@inject DialogService DialogService
@inject MapState MapState
@inject IStringLocalizer<CommonResources> cl

<RadzenButton Style="@styleLocation.ButtonStyle" title="@(cl["myLocation"] + "...")" ButtonStyle="ButtonStyle.Dark" Variant="Variant.Filled" Click="(() => GetMyLocation())"><RadzenIcon Icon="my_location"/></RadzenButton>
<RadzenButton Style="@styleZoomIn.ButtonStyle" title="@(cl["zoomIn"] + "...")" ButtonStyle="ButtonStyle.Dark" Variant="Variant.Filled" Click="(() => ZoomIn())"><RadzenIcon Icon="add" /></RadzenButton>
<RadzenButton Style="@styleZoomOut.ButtonStyle" title="@(cl["zoomOut"] + "...")" ButtonStyle="ButtonStyle.Dark" Variant="Variant.Filled" Click="(() => ZoomOut())"><RadzenIcon Icon="remove" /></RadzenButton>

@code {
    [Parameter]
    public int Order { get; set; }

    [Parameter]
    public PositionEnum Position { get; set; }

    (string ButtonStyle, string BoxStyle) styleLocation;
    (string ButtonStyle, string BoxStyle) styleZoomIn;
    (string ButtonStyle, string BoxStyle) styleZoomOut;

    protected override void OnInitialized()
    {
        styleZoomOut = MapState.GetStyleOfMapComponent(Position, Order);
        styleZoomIn = MapState.GetStyleOfMapComponent(Position, Order + 1);
        styleLocation = MapState.GetStyleOfMapComponent(Position, Order + 2);

    }


    private async Task GetMyLocation()
    {
        await JS.InvokeVoidAsync("mapAPI.getMyLocation");
    }

    private async Task ZoomIn()
    {
        await JS.InvokeVoidAsync("mapAPI.map.zoomIn");
    }

    private async Task ZoomOut()
    {
        await JS.InvokeVoidAsync("mapAPI.map.zoomOut");
    }
}
