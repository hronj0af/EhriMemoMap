@using EhriMemoMap.Helpers;
@inject IJSRuntime JS
@inject IHttpClientFactory clientFactory
@inject DialogService DialogService
@inject MapStateService MapState
@inject IStringLocalizer<CommonResources> cl

<RadzenImage Path="@(myLocationIsVisible ? "images/location.png" : "images/location-searching.png")" Style="@styleLocation.ButtonStyle" title="@((myLocationIsVisible ? cl["showMyLocation"] : cl["myLocationOn"]) + "...")" Click="(() => OnLocationClick())"></RadzenImage>
<RadzenImage Path="images/zoom-in.png" Style="@styleZoomIn.ButtonStyle" title="@(cl["zoomIn"] + "...")" Click="(() => ZoomIn())"></RadzenImage>
<RadzenImage Path="images/zoom-out.png" Style="@styleZoomOut.ButtonStyle" title="@(cl["zoomOut"] + "...")" Click="(() => ZoomOut())"></RadzenImage>


@code {
    [Parameter]
    public int Order { get; set; }

    [Parameter]
    public VerticalPositionEnum VerticalPosition { get; set; }

    [Parameter]
    public HorizontalPositionEnum HorizontalPosition { get; set; }

    (string ButtonStyle, string BoxStyle) styleLocation;
    (string ButtonStyle, string BoxStyle) styleZoomIn;
    (string ButtonStyle, string BoxStyle) styleZoomOut;
    private bool myLocationIsVisible = false;

    protected override async Task OnInitializedAsync()
    {
        var step = 45;
        var horizontalMargin = 15;
        var verticalMargin = 35;
        styleZoomOut = await MapState.GetStyleOfMapComponent(VerticalPosition, HorizontalPosition, Order, null, horizontalMargin, verticalMargin, step);
        styleZoomIn = await MapState.GetStyleOfMapComponent(VerticalPosition, HorizontalPosition, Order + 1, null, horizontalMargin, verticalMargin, step);
        styleLocation = await MapState.GetStyleOfMapComponent(VerticalPosition, HorizontalPosition, Order + 2, null, horizontalMargin, verticalMargin, step);

    }


    private async Task OnLocationClick()
    {
        if (!myLocationIsVisible)
        {
            myLocationIsVisible = true;
            await JS.InvokeVoidAsync("mapAPI.turnOnLocationTracking");
        }
        else
        {
            await JS.InvokeVoidAsync("mapAPI.goToMyLocation");
        }
    }

    private async Task ZoomIn()
    {
        await JS.InvokeVoidAsync("mapAPI.zoomIn");
    }

    private async Task ZoomOut()
    {
        await JS.InvokeVoidAsync("mapAPI.zoomOut");
    }
}
