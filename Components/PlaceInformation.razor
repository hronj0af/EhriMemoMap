@using EhriMemoMap.Data;
@using EhriMemoMap.Helpers;
@using System.Xml;
@using System.Xml.Linq;
@inject IStringLocalizer<CommonResources> cl
@inject MemogisContext context
@inject MapStateService MapState
<DialogButtons />

@foreach (var place in Incidents ?? new List<PragueIncidentsTimeline>())
{
    <PlaceInformationIncident Place="place" />
}

@foreach (var place in PlacesOfInterest ?? new List<PraguePlacesOfInterestTimeline>())
{
    <PlaceInformationInterest Place="place" />
}

@foreach (var place in InaccessiblePlaces ?? new List<PraguePlacesOfInterestTimeline>())
{
    <PlaceInformationInterest Place="place" />
}

@* @if (WMSResponse != null && WMSResponse.Layers != null && WMSResponse.Layers.Any(a => a.Features != null && a.Features.Count > 0))
{
    if (WMSResponse.Layers.Count > 1 && WMSResponse.Layers.Any(a => a.Type != WMSFeatureType.Obeti_holokaustu_z_Prahy && a.Type != WMSFeatureType.Bydliste_Zidu_v_Praze_v_dobe_okupace))
    {
        <RadzenTabs RenderMode="TabRenderMode.Client">
            <Tabs>
                @foreach (var layer in WMSResponse.Layers.Where(a => (a.Type == WMSFeatureType.Neprisupna_mista || a.Type == WMSFeatureType.Body_zajmu || a.Type == WMSFeatureType.Incidenty_v_prostoru_mesta_Prahy)))
                {
                    <RadzenTabsItem Text="@(cl["featureType_" + layer.Type.ToString()])">
                        @foreach (var feature in layer.Features)
                        {
                            <FeatureNormalInfo WMSFeatureInfo="feature" />
                        }
                    </RadzenTabsItem>
                }
                @if (WMSResponse.Layers.Any(a => a.Type == WMSFeatureType.Obeti_holokaustu_z_Prahy || a.Type == WMSFeatureType.Bydliste_Zidu_v_Praze_v_dobe_okupace))
                {
                    <RadzenTabsItem Text="@(cl["featureType_" + WMSFeatureType.Obeti_holokaustu_z_Prahy.ToString()])">
                        <FeatureVictimsInfo WMSResponse="WMSResponse" />
                    </RadzenTabsItem>
                }

            </Tabs>
        </RadzenTabs>
    }

    else
    {
        <h2>@cl["featureType_" + WMSResponse.Layers.FirstOrDefault()?.Type.ToString()]</h2>
        @foreach (var feature in WMSResponse.Layers.Where(a => a.Type != WMSFeatureType.Obeti_holokaustu_z_Prahy && a.Type != WMSFeatureType.Bydliste_Zidu_v_Praze_v_dobe_okupace).SelectMany(a => a.Features))
        {
            <FeatureNormalInfo WMSFeatureInfo="feature" />
        }
        @if (WMSResponse.Layers.Any(a => (a.Type == WMSFeatureType.Obeti_holokaustu_z_Prahy || a.Type == WMSFeatureType.Bydliste_Zidu_v_Praze_v_dobe_okupace)))
        {
            <FeatureVictimsInfo WMSResponse="WMSResponse" />
        }
    }

} *@
@code {
    [Parameter]
    public List<MapObjectForLeafletModel>? Places { get; set; }

    private List<PragueIncidentsTimeline>? Incidents { get; set; }
    private List<PraguePlacesOfInterestTimeline>? PlacesOfInterest { get; set; }
    private List<PraguePlacesOfInterestTimeline>? InaccessiblePlaces { get; set; }

    protected override void OnInitialized()
    {
        MapState.OnChange += StateHasChanged;
    }

    protected override void OnParametersSet()
    {
        if (Places == null)
            return;

        if (Places.Any(a => a.PlaceType == PlaceType.Incident.ToString()))
        {
            var ids = Places.Where(a => a.PlaceType == PlaceType.Incident.ToString()).Select(a => a.Id);
            Incidents = context.PragueIncidentsTimelines.Where(p => ids.ToArray().Contains(p.Id)).ToList();
        }

        if (Places.Any(a => a.PlaceType == PlaceType.Interest.ToString()))
        {
            var ids = Places.Where(a => a.PlaceType == PlaceType.Interest.ToString()).Select(a => a.Id);
            PlacesOfInterest = context.PraguePlacesOfInterestTimelines.Where(p => ids.ToArray().Contains(p.Id)).ToList();
        }

        if (Places.Any(a => a.PlaceType == PlaceType.Inaccessible.ToString()))
        {
            var ids = Places.Where(a => a.PlaceType == PlaceType.Inaccessible.ToString()).Select(a => a.Id);
            InaccessiblePlaces = context.PraguePlacesOfInterestTimelines.Where(p => ids.ToArray().Contains(p.Id)).ToList();
        }
    }

}

