@using EhriMemoMap.Data;
@using EhriMemoMap.Helpers;
@using System.Xml;
@using System.Xml.Linq;
@inject IStringLocalizer<CommonResources> cl
@inject MemogisContext context
@inject MapStateService MapState
<DialogButtons />

@if (Places.GroupBy(a => a.PlaceType).Count() == 1)
{
    <div style="padding: 0 2.5rem 0 2.5rem">
            <h2 class="rz-mb-12" style="color:var(--Wine-Red);">@cl["featureType_" + Places.FirstOrDefault()?.PlaceType]</h2>



        @foreach (var place in Incidents ?? new List<PragueIncidentsTimeline>())
        {
            <CardIncident Place="place" />
        }

        @foreach (var place in PlacesOfInterest ?? new List<PraguePlacesOfInterestTimeline>())
        {
            <CardInterest Place="place" />
        }

        @foreach (var place in InaccessiblePlaces ?? new List<PraguePlacesOfInterestTimeline>())
        {
            <CardInterest Place="place" />
        }

        @foreach (var place in Addresses ?? new List<AddressWithVictimsWrappwer>())
        {
            <CardAddress House="place" />
        }
    </div>
}
else
{
    <RadzenTabs RenderMode="TabRenderMode.Client">
        <Tabs>
            @foreach (var placeType in Places.Where(a => !string.IsNullOrEmpty(a.PlaceType)).GroupBy(a => a.PlaceType).Select(a => Enum.Parse<PlaceType>(a.Key)))
            {
                <RadzenTabsItem Text="@(cl["featureType_" + placeType.ToString()])">
                    <div style="padding:1.5rem">
                    @if (placeType == PlaceType.Incident)
                    {
                        foreach (var place in Incidents ?? new List<PragueIncidentsTimeline>())
                        {
                            <CardIncident Place="place" />
                        }
                    }

                    @if (placeType == PlaceType.Interest)
                    {
                        foreach (var place in PlacesOfInterest ?? new List<PraguePlacesOfInterestTimeline>())
                        {
                            <CardInterest Place="place" />
                        }
                    }

                    @if (placeType == PlaceType.Inaccessible)
                    {
                        foreach (var place in InaccessiblePlaces ?? new List<PraguePlacesOfInterestTimeline>())
                        {
                            <CardInterest Place="place" />
                        }
                    }

                    @if (placeType == PlaceType.Address)
                    {
                        foreach (var place in Addresses ?? new List<AddressWithVictimsWrappwer>())
                        {
                            <CardAddress House="place" />
                        }
                    }
                    </div>
                </RadzenTabsItem>
            }
        </Tabs>

    </RadzenTabs>

}

@code {
    [Parameter]
    public List<MapObjectForLeafletModel>? Places { get; set; }

    private List<PragueIncidentsTimeline>? Incidents { get; set; }
    private List<PraguePlacesOfInterestTimeline>? PlacesOfInterest { get; set; }
    private List<PraguePlacesOfInterestTimeline>? InaccessiblePlaces { get; set; }
    private List<AddressWithVictimsWrappwer>? Addresses { get; set; }

    protected override void OnInitialized()
    {
        MapState.OnChange += StateHasChanged;
    }

    protected override void OnParametersSet()
    {
        if (Places == null)
            return;

        if (Places.Any(a => a.PlaceType == PlaceType.Incident.ToString()))
        {
            var ids = Places.Where(a => a.PlaceType == PlaceType.Incident.ToString()).Select(a => a.Id);
            Incidents = context.PragueIncidentsTimelines.Where(p => ids.ToArray().Contains(p.Id)).ToList();
        }

        if (Places.Any(a => a.PlaceType == PlaceType.Interest.ToString()))
        {
            var ids = Places.Where(a => a.PlaceType == PlaceType.Interest.ToString()).Select(a => a.Id);
            PlacesOfInterest = context.PraguePlacesOfInterestTimelines.Where(p => ids.ToArray().Contains(p.Id)).ToList();
        }

        if (Places.Any(a => a.PlaceType == PlaceType.Inaccessible.ToString()))
        {
            var ids = Places.Where(a => a.PlaceType == PlaceType.Inaccessible.ToString()).Select(a => a.Id);
            InaccessiblePlaces = context.PraguePlacesOfInterestTimelines.Where(p => ids.ToArray().Contains(p.Id)).ToList();
        }

        if (Places.Any(a => a.PlaceType == PlaceType.Address.ToString()))
        {
            var ids = Places.Where(a => a.PlaceType == PlaceType.Address.ToString()).Select(a => a.Id);
            Addresses = context.PragueAddressesStatsTimelines.Where(p => ids.ToArray().Contains(p.Id)).
                Select(a => new AddressWithVictimsWrappwer
                    {
                        Address = a,
                        Victims = context.PragueVictimsTimelines.Where(b => b.PlaceId == a.Id).OrderBy(a => a.Label).ToList()
                    }).
                ToList();
        }
    }

}

