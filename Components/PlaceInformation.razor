@using EhriMemoMap.Helpers;
@using System.Xml;
@using System.Xml.Linq;
@inject IStringLocalizer<CommonResources> cl

@if (WMSResponse != null && WMSResponse.Layers != null && WMSResponse.Layers.Any(a => a.Features != null && a.Features.Count > 0))
{
    if (WMSResponse.Layers.Any(a => a.Features != null && a.Features.Count > 0 && (a.Type == WMSFeatureType.Neprisupna_mista || a.Type == WMSFeatureType.Body_zajmu || a.Type == WMSFeatureType.Incidenty_v_prostoru_mesta_Prahy)))
    {
        <RadzenTabs RenderMode="TabRenderMode.Client">
            <Tabs>
                @foreach (var layer in WMSResponse.Layers.Where(a => a.Features != null && a.Features.Count > 0 && (a.Type == WMSFeatureType.Neprisupna_mista || a.Type == WMSFeatureType.Body_zajmu || a.Type == WMSFeatureType.Incidenty_v_prostoru_mesta_Prahy)))
                {
                    <RadzenTabsItem Text="@(cl[layer.Type.ToString()])">
                        @foreach (var feature in layer.Features)
                        {
                            <FeatureNormalInfo WMSFeatureInfo="feature" />
                        }
                    </RadzenTabsItem>
                }
            </Tabs>
        </RadzenTabs>
    }

    else
    {
        <RadzenRow Gap="1rem" JustifyContent=JustifyContent.Left>
            @foreach (var feature in WMSResponse.Layers.SelectMany(a => a.Features))
            {
                <FeatureNormalInfo WMSFeatureInfo="feature" />
            }
        </RadzenRow>
    }

}

@code {
    [Parameter]
    public WMSResponse WMSResponse { get; set; }



}

