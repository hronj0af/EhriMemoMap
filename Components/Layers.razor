@using EhriMemoMap.Helpers;
@inject IJSRuntime JS
@inject IHttpClientFactory clientFactory
@inject DialogService DialogService
@inject MapStateService MapState
@inject MapLogicService MapLogic

@inject IStringLocalizer<CommonResources> cl

<RadzenImage Path="images/layers.png" Style="@style.ButtonStyle" title="@(cl["layers"] + "...")" Click="(() => ShowLayersList())"></RadzenImage>

@code {
    (string ButtonStyle, string BoxStyle) style;

    [Parameter]
    public int Order { get; set; }

    [Parameter]
    public VerticalPositionEnum VerticalPosition { get; set; }

    [Parameter]
    public HorizontalPositionEnum HorizontalPosition { get; set; }

    private int width;

    IEnumerable<LayerModel>? layers;

    protected override async Task OnInitializedAsync()
    {
        width = await JS.InvokeAsync<int>("mapAPI.getWindowWidth");
        style = await MapState.GetStyleOfMapComponent(VerticalPosition, HorizontalPosition, Order, width);
        MapState.OnChange += OnMyChangeHandler;
    }

    public void Dispose()
    {
        MapState.OnChange -= OnMyChangeHandler;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender)
        {
            style = await MapState.GetStyleOfMapComponent(VerticalPosition, HorizontalPosition, Order, width);
            StateHasChanged();
        }
    }


    private async void OnMyChangeHandler()
    {
        await InvokeAsync(() =>
        {
            layers = MapState.GetNotBaseLayers().ToList();
            StateHasChanged();
        });
    }

    private async Task ShowLayersList()
    {
        if (MapState.IsLayersOpen)
        {
            MapState.SetDialogIsOpen(false);
            MapState.IsLayersOpen = false;
            DialogService.CloseSide();
        }
        else
        {
            MapState.SetDialogIsOpen(true);
            MapState.IsLayersOpen = true;
            await DialogService.OpenSideAsync<LayersList>(cl["layerInfo"], options: MapState.GetDialogOptions());
        }
    }
}