@using EhriMemoMap.Helpers;
@inject IJSRuntime JS
@inject IHttpClientFactory clientFactory
@inject DialogService DialogService
@inject MapStateService MapState
@inject MapLogicService MapLogic

@inject IStringLocalizer<CommonResources> cl

<RadzenImage Path="images/layers.png" Style="@style.ButtonStyle" title="@(cl["layers"] + "...")" Click="(() => MapState.IsLayersOpen = !MapState.IsLayersOpen)"></RadzenImage>

@if (layers != null && layers.Count() > 0 && MapState.IsLayersOpen)
{
    <RadzenCard Style="@(style.BoxStyle + (!MapState.IsMobileBrowser ? ";width:400px" : ""))">
        @foreach (var item in layers.OrderBy(a => a.Order))
        {
            <RadzenRow Gap="0.5rem" AlignItems="AlignItems.Start">
                <RadzenColumn Size="1">
                    <RadzenCheckBox TValue="bool" @bind-Value=@item.Selected onclick="@(() => OnLayerClick(@item))" />
                </RadzenColumn>
                <RadzenColumn Size="10">
                    <RadzenLabel Text="@cl["layer_" + item.Name + "_title"]" />
                </RadzenColumn>
                <RadzenColumn Size="1">
                    <RadzenIcon onclick="@(() => ShowLayerAbstract(item))" title="@cl["moreInfo"]" IconStyle="IconStyle.Dark" style="font-size: 20px;cursor:pointer" Icon="help"></RadzenIcon>
                </RadzenColumn>
            </RadzenRow>
            <br />
        }
    </RadzenCard>
}

@code {
    (string ButtonStyle, string BoxStyle) style;

    [Parameter]
    public int Order { get; set; }

    [Parameter]
    public VerticalPositionEnum VerticalPosition { get; set; }

    [Parameter]
    public HorizontalPositionEnum HorizontalPosition { get; set; }

    private int width;

    IEnumerable<LayerModel>? layers;

    protected override async Task OnInitializedAsync()
    {
        width = await JS.InvokeAsync<int>("mapAPI.getWindowWidth");
        style = await MapState.GetStyleOfMapComponent(VerticalPosition, HorizontalPosition, Order, width);
        MapState.OnChange += OnMyChangeHandler;
    }

    public void Dispose()
    {
        MapState.OnChange -= OnMyChangeHandler;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender)
        {
            style = await MapState.GetStyleOfMapComponent(VerticalPosition, HorizontalPosition, Order, width);
            StateHasChanged();
        }
    }


    private async void OnMyChangeHandler()
    {
        await InvokeAsync(() =>
        {
            layers = MapState.GetNotBaseLayers().ToList();
            StateHasChanged();
        });
    }

    private async Task OnLayerClick(LayerModel layer)
    {
        if (layer.Type == LayerType.WMS)
            await JS.InvokeVoidAsync("mapAPI.toggleLayerGroup", layer.Name, layer.Selected);

        else if (layer.Type == LayerType.Polygons)
            await JS.InvokeVoidAsync("mapAPI.toggleLayerGroup", LayerType.Polygons.ToString(), layer.Selected);

        else if (layer.Type == LayerType.Objects)
            await MapLogic.RefreshObjectsOnMap(false);

        await JS.InvokeVoidAsync("mapAPI.setUrlParam", "layers", MapState.GetLayersForUrlParameter());
    }

    private async Task ShowLayerAbstract(LayerModel layer)
    {
        MapState.SetDialogIsOpen(true);
        await DialogService.OpenSideAsync<LayerInformation>(cl["layerInfo"], parameters: new Dictionary<string, object> { { "Layer", layer } }, options: MapState.GetDialogOptions());
    }
}