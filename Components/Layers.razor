@using EhriMemoMap.Helpers;
@inject IJSRuntime JS
@inject IHttpClientFactory clientFactory
@inject DialogService DialogService
@inject MapState MapState
@inject IStringLocalizer<CommonResources> cl

<RadzenButton Style="@style.ButtonStyle" title="@(cl["layers"] + "...")" ButtonStyle="ButtonStyle.Dark" Variant="Variant.Filled" Click="(() => MapState.IsLayersOpen = !MapState.IsLayersOpen)"><RadzenIcon Icon="menu" /></RadzenButton>

@if (layers != null && layers.Count() > 0 && MapState.IsLayersOpen)
{
    <RadzenCard Style="@(style.BoxStyle + (!MapState.IsMobileBrowser ? ";width:220px" : ""))">
        @foreach (var item in layers.OrderBy(a => a.Order))
        {
            <RadzenCheckBox  TValue="bool" @bind-Value=@item.Selected onclick="@(() => OnLayerClick(@item))" />
            <RadzenLabel Text="@item.Title" Style="margin-left: 8px; vertical-align: middle" />
            @if (!string.IsNullOrEmpty(item.Abstract))
            {
                <RadzenIcon onclick="@(() => ShowLayerAbstract(item))" title="@cl["moreInfo"]" IconStyle="IconStyle.Dark" style="font-size: 20px;cursor:pointer" Icon="help"></RadzenIcon>
            }
            <br />
        }
    </RadzenCard>
}

@code {
    (string ButtonStyle, string BoxStyle) style;

    [Parameter]
    public int Order { get; set; }

    [Parameter]
    public PositionEnum Position { get; set; }

    IEnumerable<LayerModel>? layers;

    protected override async Task OnInitializedAsync()
    {
        var width = await JS.InvokeAsync<int>("mapAPI.getWindowWidth");
        style = await MapState.GetStyleOfMapComponent(Position, Order, width);
        MapState.OnChange += OnMyChangeHandler;
    }

    public void Dispose()
    {
        MapState.OnChange -= OnMyChangeHandler;
    }

    private async void OnMyChangeHandler()
    {
        await InvokeAsync(() =>
        {
            layers = MapState.GetAllWMSLayers()?.Where(a => !a.Hidden).ToList();
            StateHasChanged();
        });
    }

    private async Task OnLayerClick(LayerModel layer)
    {
        MapState.SetInfoAboutLayerSelection(layer);
        var serializerSettings = new JsonSerializerSettings
            {
                ContractResolver = new CamelCasePropertyNamesContractResolver()
            };
        string layerJson = JsonConvert.SerializeObject(MapState.GetMapInfoForLeafletLayer(layer.MapName), serializerSettings);
        await JS.InvokeVoidAsync("mapAPI.changeLayer", layerJson);
        await JS.InvokeVoidAsync("mapAPI.setUrlParam", "layers", MapState.GetLayersForUrlParameter());
    }

    private async Task ShowLayerAbstract(LayerModel layer)
    {
        await DialogService.OpenSideAsync<LayerInformation>(cl["layerInfo"], parameters: new Dictionary<string, object> { { "Layer", layer } }, options: MapState.GetDialogOptions());
    }
}