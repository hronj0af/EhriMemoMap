@using System.Globalization;
@inject IJSRuntime JS
@inject IHttpClientFactory clientFactory
@inject DialogService DialogService
@inject MapStateService MapState
@inject IStringLocalizer<CommonResources> cl
@inject NavigationManager Navigation
@inject IHttpContextAccessor httpContextAccesor
@inject ILogger<Language> logger

<div style="@style.ButtonStyle" onclick="@(() => ChangeLanguage())">
    <RadzenImage Style="width:39px" Path="images/language.png" title="@(cl[otherLanguageTitle])" ></RadzenImage>
    <div style="color:white; position: absolute;top: 50%;left: 55%;transform: translate(-50%, -55%);"><h3><b>@otherLanguage</b></h3></div>
</div>


@code {
    [Parameter]
    public int Order { get; set; }

    [Parameter]
    public VerticalPositionEnum VerticalPosition { get; set; }

    [Parameter]
    public HorizontalPositionEnum HorizontalPosition { get; set; }

    string otherLanguage;
    string otherLanguageTitle;
    string currentUri;
    string imagePath;

    (string ButtonStyle, string BoxStyle) style;

    public void Dispose()
    {
        MapState.OnChange -= OnMyChangeHandler;
    }

    private async void OnMyChangeHandler()
    {
        await InvokeAsync(() =>
        {
            StateHasChanged();
        });
    }

    protected override async Task OnInitializedAsync()
    {
        MapState.OnChange += OnMyChangeHandler;
        style = await MapState.GetStyleOfMapComponent(VerticalPosition, HorizontalPosition, Order);
        otherLanguage = Culture.ToString() == "cs-CZ" ? "EN" : "CS";
        otherLanguageTitle = Culture.ToString() == "cs-CZ" ? "english" : "czech";
        imagePath = $"images/{otherLanguage.ToLower()}.png";
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender)
        {
            style = await MapState.GetStyleOfMapComponent(VerticalPosition, HorizontalPosition, Order);
            StateHasChanged();
        }
    }


    async Task ChangeLanguage()
    {
        currentUri = "~/" + await JS.InvokeAsync<string>("mapAPI.getWindowLocationSearch");
        Culture = Culture.ToString() == "cs-CZ" ? new CultureInfo("en-US") : new CultureInfo("cs-CZ");
    }

    private CultureInfo Culture
    {
        get => CultureInfo.CurrentCulture;
        set
        {
            if (CultureInfo.CurrentCulture.ToString() != value.ToString())
            {
                var cultureEscaped = Uri.EscapeDataString(value.Name);
                var uriEscaped = Uri.EscapeDataString(currentUri);

                Navigation.NavigateTo(
                    $"Culture/Set?culture={cultureEscaped}&redirectUri={uriEscaped}",
                    forceLoad: true);
            }
        }
    }
}
