@using System.Globalization;
@inject IJSRuntime JS
@inject IHttpClientFactory clientFactory
@inject DialogService DialogService
@inject MapStateService MapState
@inject IStringLocalizer<CommonResources> cl
@inject NavigationManager Navigation
@inject IHttpContextAccessor httpContextAccesor
@inject ILogger<Language> logger

<RadzenButton Style="@style.ButtonStyle" title="@(cl[otherLanguageTitle])"
              ButtonStyle="ButtonStyle.Dark"
              Variant="Variant.Filled"
              Click="ChangeLanguage">@otherLanguage</RadzenButton>

@code {
    [Parameter]
    public int Order { get; set; }

    [Parameter]
    public PositionEnum Position { get; set; }



    string otherLanguage;
    string otherLanguageTitle;
    string currentUri;

    (string ButtonStyle, string BoxStyle) style;

    protected override async Task OnInitializedAsync()
    {
        style = await MapState.GetStyleOfMapComponent(Position, Order);
        otherLanguage = Culture.ToString() == "cs-CZ" ? "EN" : "CS";
        otherLanguageTitle = Culture.ToString() == "cs-CZ" ? "english" : "czech";
    }


    async Task ChangeLanguage()
    {
        currentUri = "~/" + await JS.InvokeAsync<string>("mapAPI.getWindowLocationSearch");
        Culture = Culture.ToString() == "cs-CZ" ? new CultureInfo("en-US") : new CultureInfo("cs-CZ");
    }

    private CultureInfo Culture
    {
        get => CultureInfo.CurrentCulture;
        set
        {
            if (CultureInfo.CurrentCulture.ToString() != value.ToString())
            {
                var cultureEscaped = Uri.EscapeDataString(value.Name);
                var uriEscaped = Uri.EscapeDataString(currentUri);

                Navigation.NavigateTo(
                    $"Culture/Set?culture={cultureEscaped}&redirectUri={uriEscaped}",
                    forceLoad: true);
            }
        }
    }
}
