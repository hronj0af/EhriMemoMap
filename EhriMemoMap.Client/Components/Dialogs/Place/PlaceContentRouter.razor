@using System.Xml;
@using System.Xml.Linq;
@inject IStringLocalizer<CommonResources> cl
@inject MapStateService MapState
@inject MapLogicService MapLogic

@if (PlacesToShow != null)
{
    @if (PlaceType == PlaceType.Incident)
    {
        foreach (var place in PlacesToShow.Incidents ?? [])
        {
            <Incident Place="place" />
        }
    }

    else if (PlaceType == PlaceType.Interest) 
    {
        foreach (var place in PlacesToShow.PlacesOfInterest ?? [])
        {
            <Interest Place="place" />
        }
    }

    else if (PlaceType == PlaceType.Inaccessible)
    {
        foreach (var place in PlacesToShow.InaccessiblePlaces ?? [])
        {
            <Interest Place="place" />
        }
    }

    else if (PlaceType == PlaceType.Address)
    {
        @if (PlacesToShow.Addresses != null)
        {
            <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.End">
                <RadzenTextBox Placeholder="@cl["filterNames"]" @bind-Value=@FilteredName>
                </RadzenTextBox>
                <img src="images/search-only-dark.svg" onclik="(() => StateHasChanged())" style="cursor:pointer" class="rz-pb-2" />
            </RadzenStack>

        }
        foreach (var place in PlacesToShow.Addresses ?? [])
        {
            <Address House="place" FilteredName="@FilteredName" />
        }
    }
    
    else if (PlaceType == PlaceType.AddressLastResidence)
    {
        @if (PlacesToShow.AddressesLastResidence != null)
        {
            <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.End">
                <RadzenTextBox Placeholder="@cl["filterNames"]" @bind-Value=@FilteredName>
                </RadzenTextBox>
                <img src="images/search-only-dark.svg" onclik="(() => StateHasChanged())" style="cursor:pointer" class="rz-pb-2" />
            </RadzenStack>

        }
        foreach (var place in PlacesToShow.AddressesLastResidence ?? [])
        {
            <Address House="place" FilteredName="@FilteredName" />
        }
    }
    
    else if (PlaceType == PlaceType.Memory)
    {
        foreach (var place in PlacesToShow.PlacesOfMemory ?? [])
        {
            <Memory Place="place" />
        }
    }

    else if (PlaceType == PlaceType.Memorial)
    {
        foreach (var place in PlacesToShow.Memorials ?? [])
        {
            <Memorial Place="place" />
        }
    }
}

@code {
    [Parameter]
    public PlacesResult? PlacesToShow { get; set; }

    [Parameter]
    public PlaceType PlaceType { get; set; }

    [Parameter]
    public string? FilteredName { get; set; }


    protected override void OnInitialized()
    {
        MapState.OnChange += StateHasChanged;
    }

}

