@inject IJSRuntime JS
@inject IHttpClientFactory clientFactory
@inject DialogService DialogService
@inject MapStateService MapState
@inject MapLogicService MapLogic

@inject IStringLocalizer<CommonResources> cl

<DialogButtons />


@if (layers != null && layers.Count() > 0)
{
    <div class="rz-px-6 rz-pt-12" style="display:flex;gap:10px;flex-direction:column">

        <h1 class="rz-pb-4" style="color:var(--Wine-Red)">@cl["layers"]</h1>
        <p>@cl["layerHelp"]</p>

        @if (MapState.AppState == AppStateEnum.Development)
        {
            <RadzenButton ButtonStyle="ButtonStyle.Secondary" Click="@(() => MapState.ShowLayersForce = !MapState.ShowLayersForce)" Style="margin-bottom:10px;">
                @if (MapState.ShowLayersForce)
                {
                    <text>
                        Skrýt vrstvy bez ohledu na zoom mapy
                    </text>

                }
                else
                {
                    <text>
                        Zobrazit vrstvy bez ohledu na zoom mapy
                    </text>

                }
            </RadzenButton>
        }

        @foreach (var item in layers.OrderBy(a => a.Order))
        {
            var iconFilter = item.FontColor == FontColor.Dark ? "filter: brightness(30%);height:24px;width:auto;" : "height:24px;width:auto;";
            var fontColor = item.FontColor == FontColor.Light ? "var(--Beige-LIGHT)" : "var(--Grey)";

            <RadzenCard Style="@("padding:5px;background-color:" + item.BackgroundColor + ";color:" + fontColor)" class="rz-p-3 layerInfo">
                <RadzenRow AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Start" RowGap="0">
                    <RadzenColumn Size="1">
                        <RadzenImage Style="@(iconFilter + "cursor:pointer;")" Click="@(() => OnLayerClick(item))" Path="@(item.Selected ? "images/checkbox-true.svg" : "images/checkbox-false.svg")"></RadzenImage>
                    </RadzenColumn>
                    <RadzenColumn Size="11" >
                        <RadzenStack JustifyContent="JustifyContent.SpaceBetween" Orientation="Orientation.Horizontal" >
                            <div style="font-size: 14px; font-family: 'Barlow'; font-weight:700;">
                                @cl["layer_" + item.Name + "_title_" + MapState?.Map?.InitialVariables?.City]
                            </div>
                            <RadzenImage onerror="this.onerror=null; this.remove();" Style="@iconFilter" Path="@("images/" + item.Name + ".svg")"></RadzenImage>
                        </RadzenStack>
                    </RadzenColumn>
                </RadzenRow>
                <RadzenRow JustifyContent="JustifyContent.Start" RowGap="0">
                    <RadzenColumn Size="11" Offset="1">
                        <div class="layerInfoInner">
                            <div style="font-size:12px;font-family: 'Noto Serif'">@cl["layer_" + item.Name + "_abstract_" + MapState?.Map?.InitialVariables?.City]</div>
                        </div>
                    </RadzenColumn>
                </RadzenRow>
            </RadzenCard>
        }
    </div>

}

@code {
    [Parameter]
    public int Order { get; set; }

    IEnumerable<LayerModel>? layers;

    protected override async Task OnInitializedAsync()
    {
        layers = MapState.GetNotBaseLayers().ToList();
        MapState.OnChange += OnMyChangeHandler;
    }

    public void Dispose()
    {
        MapState.OnChange -= OnMyChangeHandler;
    }


    private async void OnMyChangeHandler()
    {
        await InvokeAsync(() =>
        {
            layers = MapState.GetNotBaseLayers().ToList();
            StateHasChanged();
        });
    }

    private async Task OnLayerClick(LayerModel layer)
    {
        layer.Selected = !layer.Selected;

        if (layer.Type == LayerType.Heatmap && layer.Selected)
            foreach (var l in layers?.Where(a => a.Type == LayerType.Heatmap && a.Name != layer.Name) ?? [])
                l.Selected = false;

        if (layer.Type == LayerType.WMS)
            await JS.InvokeVoidAsync("mapAPI.toggleLayerGroup", layer.Name, layer.Selected);

        else if (layer.Type == LayerType.Polygons)
            await JS.InvokeVoidAsync("mapAPI.toggleLayerGroup", LayerType.Polygons.ToString(), layer.Selected);

        else if (layer.Type == LayerType.Objects || layer.Type == LayerType.Heatmap)
            await MapLogic.RefreshObjectsOnMap(false);

        await JS.InvokeVoidAsync("mapAPI.setUrlParam", "layers", MapState.GetLayersForUrlParameter());
        MapState.NotifyStateChanged();
    }

}