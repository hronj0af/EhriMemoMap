@using EhriMemoMap.Helpers;
@inject IJSRuntime JS
@inject MapStateService MapState
@inject MapLogicService MapLogic
@inject IStringLocalizer<CommonResources> cl
@inject DialogService DialogService
<DialogButtons />

<div class="rz-px-6 rz-pt-12" >
    <h1 class="rz-pb-4" style="color:var(--Wine-Red)">
        @cl["search"]
        &nbsp;&nbsp;<span title="@cl["helpSearch"]">
            <svg width="16" height="16" viewBox="0 0 22 22" fill="none" xmlns="http://www.w3.org/2000/svg">
                <g id="Group 135">
                    <path id="help" d="M10.5853 17.0313C10.9577 17.0313 11.2724 16.9027 11.5295 16.6455C11.7866 16.3882 11.9152 16.0733 11.9152 15.7008C11.9152 15.3282 11.7866 15.0133 11.5295 14.7561C11.2724 14.4988 10.9577 14.3702 10.5853 14.3702C10.213 14.3702 9.89828 14.4988 9.64118 14.7561C9.38408 15.0133 9.25553 15.3282 9.25553 15.7008C9.25553 16.0733 9.38408 16.3882 9.64118 16.6455C9.89828 16.9027 10.213 17.0313 10.5853 17.0313ZM9.62788 12.9332H11.596C11.596 12.3477 11.6625 11.8865 11.7955 11.5494C11.9285 11.2123 12.3052 10.751 12.9258 10.1656C13.3868 9.70432 13.7503 9.26523 14.0163 8.84832C14.2822 8.4314 14.4152 7.93022 14.4152 7.34477C14.4152 6.35127 14.0517 5.58841 13.3248 5.05618C12.5978 4.52395 11.7379 4.25784 10.7449 4.25784C9.73427 4.25784 8.91421 4.52395 8.28476 5.05618C7.65532 5.58841 7.21648 6.22709 6.96824 6.97221L8.7236 7.66411C8.81226 7.34477 9.01173 6.99882 9.32202 6.62626C9.63231 6.2537 10.1066 6.06742 10.7449 6.06742C11.3123 6.06742 11.7379 6.22265 12.0216 6.53312C12.3052 6.84359 12.4471 7.1851 12.4471 7.55766C12.4471 7.91248 12.3407 8.24512 12.1279 8.55559C11.9152 8.86606 11.6492 9.15435 11.33 9.42046C10.5499 10.1124 10.0712 10.6357 9.89384 10.9905C9.71653 11.3454 9.62788 11.9929 9.62788 12.9332ZM10.6385 21.2892C9.16688 21.2892 7.78387 21.0098 6.48951 20.4509C5.19515 19.8921 4.06924 19.1337 3.11177 18.1756C2.1543 17.2176 1.39631 16.0911 0.837785 14.796C0.279262 13.5009 0 12.1171 0 10.6446C0 9.17209 0.279262 7.78829 0.837785 6.4932C1.39631 5.19811 2.1543 4.07156 3.11177 3.11354C4.06924 2.15553 5.19515 1.3971 6.48951 0.838262C7.78387 0.279421 9.16688 0 10.6385 0C12.1102 0 13.4932 0.279421 14.7876 0.838262C16.0819 1.3971 17.2078 2.15553 18.1653 3.11354C19.1228 4.07156 19.8808 5.19811 20.4393 6.4932C20.9978 7.78829 21.2771 9.17209 21.2771 10.6446C21.2771 12.1171 20.9978 13.5009 20.4393 14.796C19.8808 16.0911 19.1228 17.2176 18.1653 18.1756C17.2078 19.1337 16.0819 19.8921 14.7876 20.4509C13.4932 21.0098 12.1102 21.2892 10.6385 21.2892ZM10.6385 19.1603C13.0145 19.1603 15.0269 18.3353 16.6759 16.6854C18.3249 15.0355 19.1494 13.0219 19.1494 10.6446C19.1494 8.2673 18.3249 6.2537 16.6759 4.60379C15.0269 2.95387 13.0145 2.12892 10.6385 2.12892C8.2626 2.12892 6.25014 2.95387 4.60117 4.60379C2.9522 6.2537 2.12771 8.2673 2.12771 10.6446C2.12771 13.0219 2.9522 15.0355 4.60117 16.6854C6.25014 18.3353 8.2626 19.1603 10.6385 19.1603Z" fill="var(--Wine-Red)"></path>
                </g>
            </svg>
        </span>
    </h1>
    <RadzenStack Orientation="Orientation.Vertical" AlignItems="AlignItems.End">
        <RadzenTextBox Change="LoadData" @bind-Value=@MapState.SearchedPlaceString Style="width:100%;box-sizing: border-box;">
        </RadzenTextBox>
        <RadzenButton ButtonStyle="ButtonStyle.Primary" Variant="Variant.Outlined" Click="LoadData">
            @cl["search"]
        </RadzenButton>
    </RadzenStack>
    @if (showLoading)
    {
        <div class="spinner"></div>
    }
    @if (MapState.SearchedPlaces != null)
    {
        <div class="rz-py-4" style="font-size:18px;color:var(--Wine-Red);font-family:'Barlow Bold';">
            @cl["resultsFor"]: "@(MapState.SearchedPlaceString)"
        </div>

        @foreach (var placeGroup in MapState.SearchedPlaces.GroupBy(a=>a.Type).OrderBy(a=>a.Key))
        {
            <h2 class="rz-py-5" style="cursor:pointer;color:var(--Wine-Red)" onclick="@(() => TogglePlaceType(placeGroup.Key))">
                @cl["featureType_" + placeGroup.Key]
                @if (!openedTypes.Any(a => a == placeGroup.Key))
                {
                    <RadzenImage Style="height:17px;cursor:pointer" class="rz-pl-3" Path="images/arrow-right.png" title="@(cl["showStatistics"] + "...")"></RadzenImage>
                }
                else
                {
                    <RadzenImage Style="width:17px;cursor:pointer" class="rz-pl-2" Path="images/arrow-down.png" title="@(cl["hideStatistics"] + "...")"></RadzenImage>
                }
            </h2>
            <div style="@(!openedTypes.Any(a=>a == placeGroup.Key) ? "display:none" : "")">
                @foreach (var place in placeGroup.OrderBy(a=>a.LabelCs))
                {
                    <RadzenRow class="rz-pt-4" RowGap="0" onclick="@(() => ShowPlace(place))" style="cursor:pointer">
                        <RadzenColumn Size="1">
                            <RadzenImage style="height:25px" Path="@("images/" + place.Type + "-wine.svg")"></RadzenImage>
                        </RadzenColumn>
                        <RadzenColumn Size="11">
                            <h3 class="rz-mb-1">
                                @if (CultureInfo.CurrentCulture.ToString() == "cs-CZ")
                                {
                                    @place.LabelCs
                                }
                                else
                                {
                                    @place.LabelEn
                                }
                            </h3>
                            @if (place.Date != null)
                            {
                                <h5>@place.Date?.ToString("d. M. yyyy")</h5>
                            }
                            @if (place.PlaceCs != null)
                            {
                                <span style="font-size:14px">@place.PlaceCs</span>
                            }
                        </RadzenColumn>

                    </RadzenRow>

                }
                </div>
        }

    }



</div>


@code {
    private List<string> openedTypes = new List<string>();
    private bool showLoading = false;

    public async Task ShowPlace(Place place)
    {
        if (place != null)
        {
            var zoom = 15;
            if (place.MapObject == null || !place.MapObject.Contains("Polygon"))
                zoom = 18;
            await JS.InvokeVoidAsync("mapAPI.addObjectFromJsonString", place.MapLocation);
            await JS.InvokeVoidAsync("mapAPI.goToLocation", place.MapLocation, zoom);
        }
        else
            await JS.InvokeVoidAsync("mapAPI.removeAdditionalObjects");

    }

    async Task LoadData()
    {
        MapState.SearchedPlaces = null;
        await InvokeAsync(StateHasChanged);
        showLoading = true;
        MapState.SearchedPlaces = await MapLogic.GetSolrPlaces(new SolrQueryParameters { Query = MapState.SearchedPlaceString });
        showLoading = false;

        openedTypes = new List<string>();
        foreach (var placeGroup in MapState.SearchedPlaces.GroupBy(a => a.Type))
            if (!openedTypes.Any(a => a == placeGroup.Key))
                openedTypes.Add(placeGroup.Key);

        await InvokeAsync(StateHasChanged);
    }

    public async Task ShowPlace()
    {
        var place = MapState.SearchedPlaces.FirstOrDefault(a => CultureInfo.CurrentCulture.ToString() == "cs-CZ" ? a.DropDownInfoCs == MapState.SearchedPlaceString : a.DropDownInfoEn == MapState.SearchedPlaceString);
        await ShowPlace(place);
    }

    private async void OnMyChangeHandler()
    {
        await InvokeAsync(() =>
        {
            if (MapState.DialogType != DialogTypeEnum.Search)
            {
                JS.InvokeVoidAsync("mapAPI.removeAdditionalObjects");
                MapState.SearchedPlaceString = "";
            }
            StateHasChanged();
        });
    }

    private void TogglePlaceType(string placeType)
    {
        if (openedTypes.Any(a => a == placeType))
            openedTypes.Remove(placeType);
        else
            openedTypes.Add(placeType);
        StateHasChanged();
    }
}
