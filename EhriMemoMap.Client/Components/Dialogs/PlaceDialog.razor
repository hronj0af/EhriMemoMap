@using EhriMemoMap.Data;
@using EhriMemoMap.Helpers;
@using System.Xml;
@using System.Xml.Linq;
@inject IStringLocalizer<CommonResources> cl
@inject MapStateService MapState
@inject MapLogicService MapLogic
<DialogButtons />

<div class="rz-pt-12">
    @if (PlacesToShow != null)
    {
        @if (Places.GroupBy(a => a.PlaceType).Count() == 1)
        {
            <div style="padding: 0 2.5rem 0 2.5rem">
                <h2 class="rz-mb-12" style="color:var(--Wine-Red);">@cl["featureType_" + Places.FirstOrDefault()?.PlaceType]</h2>



                @foreach (var place in PlacesToShow.Incidents ?? new List<PragueIncidentsTimeline>())
                {
                    <CardIncident Place="place" />
                }

                @foreach (var place in PlacesToShow.PlacesOfInterest ?? new List<PraguePlacesOfInterestTimeline>())
                {
                    <CardInterest Place="place" />
                }

                @foreach (var place in PlacesToShow.InaccessiblePlaces ?? new List<PraguePlacesOfInterestTimeline>())
                {
                    <CardInterest Place="place" />
                }

                @if (PlacesToShow.Addresses != null)
                {
                    <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.End">
                        <RadzenTextBox Placeholder="@cl["filterNames"]" @bind-Value=@filteredName>
                        </RadzenTextBox>
                        <img src="images/search-only-dark.svg" onclik="(() => StateHasChanged())" style="cursor:pointer" class="rz-pb-2" />
                    </RadzenStack>

                }
                @foreach (var place in PlacesToShow.Addresses ?? new List<AddressWithVictimsWrappwer>())
                {
                    <CardAddress House="place" FilteredName="@filteredName" />
                }

                @foreach (var place in PlacesToShow.PlacesOfMemory ?? new List<PraguePlacesOfMemory>())
                {
                    <CardMemory Place="place" />
                }
            </div>
        }
        else
        {
            <div class="rz-pt-6">
                <RadzenTabs RenderMode="TabRenderMode.Client">
                    <Tabs>
                        @foreach (var placeType in Places.Where(a => !string.IsNullOrEmpty(a.PlaceType)).GroupBy(a => a.PlaceType).Select(a => Enum.Parse<PlaceType>(a.Key)))
                        {
                            <RadzenTabsItem Text="@(cl["featureType_" + placeType.ToString()])">
                                <div style="padding:1.5rem">
                                    @if (placeType == PlaceType.Incident)
                                    {
                                        foreach (var place in PlacesToShow.Incidents ?? new List<PragueIncidentsTimeline>())
                                        {
                                            <CardIncident Place="place" />
                                        }
                                    }

                                    @if (placeType == PlaceType.Interest)
                                    {
                                        foreach (var place in PlacesToShow.PlacesOfInterest ?? new List<PraguePlacesOfInterestTimeline>())
                                        {
                                            <CardInterest Place="place" />
                                        }
                                    }

                                    @if (placeType == PlaceType.Inaccessible)
                                    {
                                        foreach (var place in PlacesToShow.InaccessiblePlaces ?? new List<PraguePlacesOfInterestTimeline>())
                                        {
                                            <CardInterest Place="place" />
                                        }
                                    }

                                    @if (placeType == PlaceType.Address)
                                    {
                                        @if (PlacesToShow.Addresses != null)
                                        {
                                            <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.End">
                                                <RadzenTextBox Placeholder="@cl["filterNames"]" @bind-Value=@filteredName>
                                                </RadzenTextBox>
                                                <img src="images/search-only-dark.svg" onclik="(() => StateHasChanged())" style="cursor:pointer" class="rz-pb-2" />
                                            </RadzenStack>

                                        }
                                        foreach (var place in PlacesToShow.Addresses ?? new List<AddressWithVictimsWrappwer>())
                                        {
                                            <CardAddress House="place" FilteredName="@filteredName" />
                                        }
                                    }
                                    @if (placeType == PlaceType.Memory)
                                    {
                                        foreach (var place in PlacesToShow.PlacesOfMemory ?? new List<PraguePlacesOfMemory>())
                                        {
                                            <CardMemory Place="place" />
                                        }
                                    }
                                </div>
                            </RadzenTabsItem>
                        }
                    </Tabs>

                </RadzenTabs>
            </div>

        }

    }
</div>


@code {
    [Parameter]
    public List<MapObjectForLeafletModel>? Places { get; set; }

    private PlacesResult? PlacesToShow { get; set; }
    private string? filteredName { get; set; }

    protected override void OnInitialized()
    {
        MapState.OnChange += StateHasChanged;
    }

    protected void ChangedFilteredName()
    {
        StateHasChanged();
    }

    protected override async Task OnParametersSetAsync()
    {
        if (Places == null)
            return;

        PlacesToShow = null;

        var parameters = new PlacesParameters();

        if (Places.Any(a => a.PlaceType == PlaceType.Incident.ToString()))
            parameters.IncidentsIds = Places.Where(a => a.PlaceType == PlaceType.Incident.ToString()).Select(a => a.Id).ToArray();

        if (Places.Any(a => a.PlaceType == PlaceType.Interest.ToString()))
            parameters.PlacesOfInterestIds = Places.Where(a => a.PlaceType == PlaceType.Interest.ToString()).Select(a => a.Id).ToArray();

        if (Places.Any(a => a.PlaceType == PlaceType.Inaccessible.ToString()))
            parameters.InaccessiblePlacesIds = Places.Where(a => a.PlaceType == PlaceType.Inaccessible.ToString()).Select(a => a.Id).ToArray();

        if (Places.Any(a => a.PlaceType == PlaceType.Address.ToString()))
            parameters.AddressesIds = Places.Where(a => a.PlaceType == PlaceType.Address.ToString()).Select(a => a.Id).ToArray();

        if (Places.Any(a => a.PlaceType == PlaceType.Memory.ToString()))
            parameters.PlacesOfMemoryIds = Places.Where(a => a.PlaceType == PlaceType.Memory.ToString()).Select(a => a.Id).ToArray();

        PlacesToShow = await MapLogic.GetPlaces(parameters);
    }

}

