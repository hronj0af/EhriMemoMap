@inject IStringLocalizer<CommonResources> cl
@inject MapStateService MapState
@inject MapLogicService MapLogic
@inject IJSRuntime JS

<div style="padding:2.5rem 2.5rem 0 2.5rem;" id="card-narrative">

    @if (MapState.NarrativeMap != null)
    {
        <RadzenRow onclick="@(() => ShowAllStoryMaps())" AlignItems="AlignItems.Center" class="rz-mb-4" Style="cursor:pointer">
            <RadzenColumn Size="1">
                <RadzenImage Path="images/arrow-left-grey.png" />
            </RadzenColumn>
            <RadzenColumn Size="10">
                <h4>
                    @cl.GetString("otherStoryMaps")
                </h4>
            </RadzenColumn>
            <RadzenColumn Size="1">
                <RadzenImage Path="images/storymap-icon.png" Style="height:30px"/>
            </RadzenColumn>
        </RadzenRow>
        <RadzenRow>
            <RadzenColumn Size="12">
                <h1 class="rz-mb-6" style="color:var(--Wine-Red)">@(CultureInfo.CurrentCulture.ToString() == "cs-CZ" ? MapState.NarrativeMap.LabelCs : MapState.NarrativeMap.LabelEn)</h1>
            </RadzenColumn>
        </RadzenRow>

        <StoryMapTimeline />
    }
    else if (MapState.DialogParameters.Id == null && MapState.AllNarrativeMaps != null)
    {
        <h1 class="rz-mb-8" style="color:var(--Wine-Red)">@cl.GetString("storyMaps")</h1>
        @foreach (var map in MapState.AllNarrativeMaps)
        {
            <div>
                <h4 class="rz-mb-6" style="cursor:pointer" onclick="@(() => ShowNarrativeMap(map.Id))">@(CultureInfo.CurrentCulture.ToString() == "cs-CZ" ? @map.LabelCs : @map.LabelEn)</h4>
            </div>
        }
    }

</div>

@code {
    private async Task ShowAllStoryMaps()
    {
        await MapLogic.GetAllNarrativeMaps();
        MapState.DialogParameters.Id = null;
        MapState.NarrativeMap = null;
        await MapState.SetMapType(MapTypeEnum.Normal);
        MapState.NotifyStateChanged();

    }

    private async Task ShowNarrativeMap(long? id)
    {
        if (id == null)
            return;
        await MapState.SetDialog(DialogTypeEnum.StoryMap, new DialogParameters { Id = id });
        await MapState.SetMapType(MapTypeEnum.StoryMapWhole);
        await MapLogic.GetNarrativeMap(MapState.DialogParameters.Id, MapState.Map.InitialVariables?.City);
        await MapLogic.ShowNarrativeMapPlaces();
        MapState.NotifyStateChanged();
    }


    protected override async Task OnInitializedAsync()
    {
        MapState.OnChange += StateHasChanged;
        await MapLogic.GetAllNarrativeMaps();
    }

    public void Dispose()
    {
        MapState.OnChange -= StateHasChanged;
    }
}
