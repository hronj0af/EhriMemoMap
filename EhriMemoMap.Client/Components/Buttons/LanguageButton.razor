@using System.Globalization;
@inject IJSRuntime JS
@inject IHttpClientFactory clientFactory
@inject DialogService DialogService
@inject MapStateService MapState
@inject IStringLocalizer<CommonResources> cl
@inject NavigationManager Navigation
@inject ILogger<LanguageButton> logger

@if (MobileVersion)
{
    <RadzenButton Size="ButtonSize.ExtraSmall" Variant="Variant.Flat" id="btn-language-topbar" Click="ChangeLanguage">
        <b>@otherLanguage</b>
    </RadzenButton>
}
else
{
    <div style="cursor:pointer;position:absolute;right:0" onclick="@(() => ChangeLanguage())">
        @* <div class="icon-small icon-language" title="@(cl["otherLanguageTitle"] + "...")"></div> *@

        <RadzenImage Style="width:39px" Path="images/language.png" title="@(cl[otherLanguageTitle])"></RadzenImage>
        <div style="color:white; position: absolute;top: 50%;left: 55%;transform: translate(-50%, -65%);"><h3><b>@otherLanguage</b></h3></div>
    </div>

}

<style>
    #btn-language-topbar {
        background-color: var(--Beige-LIGHT);
        color: var(--Wine-Red);
        font-family: Barlow Regular;
        font-weight: 700;
    }

        #btn-language-topbar:hover {
            color: var(--Beige-LIGHT);
            background-color: var(--Wine-Red);
            font-family: Barlow Regular;
            font-weight: 700;
        }
</style>
@code {
    [Parameter]
    public bool MobileVersion { get; set; } = false;

    string otherLanguage;
    string otherLanguageTitle;
    string currentUri;
    string imagePath;

    public void Dispose()
    {
        MapState.OnChange -= StateHasChanged;
    }

    protected override async Task OnInitializedAsync()
    {
        MapState.OnChange += StateHasChanged;
        // style = await MapState.GetStyleOfMapComponent(VerticalPosition, HorizontalPosition, Order);
        otherLanguage = Culture.ToString() == "cs-CZ" ? "EN" : "CS";
        otherLanguageTitle = Culture.ToString() == "cs-CZ" ? "english" : "czech";
        imagePath = $"images/{otherLanguage.ToLower()}.png";
    }

    async Task ChangeLanguage()
    {
        currentUri = "~/" + await JS.InvokeAsync<string>("mapAPI.getWindowLocationSearch");
        Culture = Culture.ToString() == "cs-CZ" ? new CultureInfo("en-US") : new CultureInfo("cs-CZ");
    }


    private CultureInfo Culture
    {
        get => CultureInfo.CurrentCulture;
        set
        {
            if (CultureInfo.CurrentCulture != value)
            {
                var js = (IJSInProcessRuntime)JS;
                js.InvokeVoid("mapAPI.setBlazorCulture", value.Name);

                Navigation.NavigateTo(Navigation.Uri, forceLoad: true);
            }
        }
    }
}
