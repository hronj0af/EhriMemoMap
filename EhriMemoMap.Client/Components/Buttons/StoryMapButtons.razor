@inject MapStateService MapState
@inject MapLogicService MapLogic

@inject IStringLocalizer<CommonResources> cl

@if (MapState.MapType == MapTypeEnum.StoryMapWhole || MapState.MapType == MapTypeEnum.StoryMapOneStop)
{
    <div style="@style">
        <div style="display:flex;gap:5px">
            <RadzenButton Size="ButtonSize.Small" Click="CloseNarrativeMap" ButtonStyle="ButtonStyle.Dark" Variant="Variant.Flat">
                @cl["back"]
            </RadzenButton>
            @if (MapState.MapType == MapTypeEnum.StoryMapOneStop)
            {
                <RadzenButton Size="ButtonSize.Small" Click="(() => MapLogic.ShowNarrativeMapPlaces())" ButtonStyle="ButtonStyle.Dark" Variant="Variant.Flat">
                    @cl["backToStoryMapWhole"]
                </RadzenButton>
            }

        </div>
    </div>
}


@code {
    private string style = "";

    protected override async Task OnInitializedAsync()
    {
        MapState.OnChange += OnMyChangeHandler;
    }

    public void Dispose()
    {
        MapState.OnChange -= OnMyChangeHandler;
    }

    public async Task CloseNarrativeMap()
    {
        await MapState.SetMapType(MapTypeEnum.Normal);
        await MapState.ToggleDialog(DialogTypeEnum.None);

    }

    public string GetStyle()
    {
        if (MapState.IsMobileView)
            return $"position:absolute;top:54px;left:10px;z-index:1002;";
        return $"position:absolute;top:20px;left:20px;z-index:1002";
    }

    private async void OnMyChangeHandler()
    {
        await InvokeAsync(() =>
        {
            style = GetStyle();
            StateHasChanged();
        });
    }


}