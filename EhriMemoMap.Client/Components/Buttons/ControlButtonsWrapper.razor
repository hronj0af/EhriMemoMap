@inject MapStateService MapState

@if (!string.IsNullOrEmpty(style))
{
    <div id="controlButtonsWrapper" style="@style">
        @if (isMobileView == false)
        {
            <RadzenRow Gap="0" RowGap="5px" JustifyContent="justifyContent" AlignItems="AlignItems.Center">
                <RadzenColumn Size="12">
                    @if (MapState?.Map?.InitialVariables?.AllCities != null && MapState.Map.InitialVariables.AllCities.Count() > 0)
                    {
                        <AllCities />
                    }
                    else
                    {
                        <Home />
                    }
                </RadzenColumn>
                @if (MapState.MapType == MapTypeEnum.Normal)
                {
                    <RadzenColumn Size="12">
                        <Search />
                    </RadzenColumn>
                    <RadzenColumn Size="12">
                        <Layers />
                    </RadzenColumn>
                }
                @if (MapState?.Map?.InitialVariables?.StoryMaps ?? false)
                {
                    <RadzenColumn Size="12">
                        <StoryMap />
                    </RadzenColumn>
                }
                <RadzenColumn Size="12">
                    <Help />
                </RadzenColumn>
                <RadzenColumn Size="12">
                    <Language />
                </RadzenColumn>
            </RadzenRow>

        }
        else
        {
            <RadzenRow Gap="0" JustifyContent="justifyContent" AlignItems="AlignItems.Center">
                <RadzenColumn Size="MapState.GetTimeline() != null && MapState.MapType == MapTypeEnum.Normal ? 4 : 6">
                    <Search MobileVersion="true" Border="true" />
                </RadzenColumn>
                @if (MapState.GetTimeline() != null && MapState.MapType == MapTypeEnum.Normal)
                {
                    <RadzenColumn Size="4">
                        <Timeline MobileVersion="true" Border="true" />
                    </RadzenColumn>
                }
                <RadzenColumn Size="MapState.GetTimeline() != null && MapState.MapType == MapTypeEnum.Normal ? 4 : 6">
                    <Layers MobileVersion="true" />
                </RadzenColumn>
            </RadzenRow>

        }
    </div>

}

@code {
    public string style;
    public string gap;
    public JustifyContent justifyContent;
    public bool? isMobileView;

    protected override async Task OnInitializedAsync()
    {
        MapState.OnChange += OnMyChangeHandler;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        isMobileView = MapState.IsMobileView;
        style = GetStyle();
        if (!firstRender)
        {
            justifyContent = MapState.IsMobileView ? JustifyContent.Center : JustifyContent.End;
        }
    }

    public void Dispose()
    {
        MapState.OnChange -= OnMyChangeHandler;
    }

    private async void OnMyChangeHandler()
    {
        await InvokeAsync(() =>
        {
            style = GetStyle();
            isMobileView = MapState.IsMobileView;
            StateHasChanged();
        });
    }

    public string GetStyle()
    {
        if (MapState.IsMobileView)
            if (!MapState.IsDialogFullScreen)
                return $"position:absolute;{(MapState.DialogType != DialogTypeEnum.None && MapState.DialogType != DialogTypeEnum.Help ? $"bottom:{MapState.HeightOfDialog}%" : "bottom:0px")};z-index:10005;background-color:var(--Grey);width:100%;";
            else
                return $"display:none;";// position:absolute;{(MapState.DialogType != DialogTypeEnum.None && MapState.DialogType != DialogTypeEnum.Help ? $"bottom:{MapState.WindowHeight - 88}px" : "bottom:0px")};z-index:10005;background-color:var(--Grey);width:100%;";

        return $"position:absolute;top:30px;right:{(MapState.DialogType == DialogTypeEnum.None ? "0px" : MapState.WidthOfDialogPercent)};z-index:1005;width:47px";
    }

}
