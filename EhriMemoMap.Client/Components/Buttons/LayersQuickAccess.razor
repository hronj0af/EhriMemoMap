@inject IJSRuntime JS
@inject IHttpClientFactory clientFactory
@inject DialogService DialogService
@inject MapStateService MapState
@inject MapLogicService MapLogic

@inject IStringLocalizer<CommonResources> cl

@if (layers != null && layers.Count(a => a.QuickAccess) > 0)
{
    <div style="position:absolute;top:20px;left:20px;z-index:2000">
        <div style="display:flex;gap:10px">
            @foreach (var item in layers.Where(a => a.QuickAccess).OrderBy(a => a.Order))
            {

                var iconFilter = item.FontColor == FontColor.Dark ? "filter: brightness(30%);max-width:22px;max-height:22px;width: auto;height: auto;" : "max-width:22px;max-height:22px;width: auto;height: auto;";
                var fontColor = item.FontColor == FontColor.Light ? "var(--Beige-LIGHT)" : "var(--Grey)"; 
                var opacity = item.Selected ? "opacity:1" : "opacity:0.6";

                <div onclick="@(() => OnLayerClick(item))" style="cursor:pointer;background-color: @(item.BackgroundColor); color: @(fontColor); border-radius: 6px; order:@(item.Order); padding: 0 5px 0 5px">
                    <div style="@opacity;height: 38px;" class="center">
                        <RadzenImage Style="@iconFilter" class="rz-px-1" Path="@(item.Selected ? "images/checkbox-true.svg" : "images/checkbox-false.svg")"></RadzenImage>
                        <div class="rz-px-1" style="margin-bottom:2px;font-size: 16px; font-family: Barlow; font-weight: 700;">@cl["layer_" + item.Name + "_title_short"]</div>
                        <RadzenImage class="rz-px-2" Style="@iconFilter" Path="@("images/" + item.Name + ".png")"></RadzenImage>
                    </div>
                </div>
            }
        </div>
    </div>

}

@code {

    IEnumerable<LayerModel>? layers;

    protected override async Task OnInitializedAsync()
    {
        layers = MapState.GetNotBaseLayers().ToList();
        MapState.OnChange += OnMyChangeHandler;
    }

    public void Dispose()
    {
        MapState.OnChange -= OnMyChangeHandler;
    }


    private async void OnMyChangeHandler()
    {
        await InvokeAsync(() =>
        {
            layers = MapState.GetNotBaseLayers().ToList();
            StateHasChanged();
        });
    }

    private async Task OnLayerClick(LayerModel layer)
    {
        // když kliknu na tlačítko a je otevřené dialogové okno s vrstvami
        // tak notifikuju MapState, aby se změna propsala i v dialogovém okně
        if (MapState.DialogType == DialogTypeEnum.Layers)
            MapState.NotifyStateChanged();

        layer.Selected = !layer.Selected;
        if (layer.Type == LayerType.WMS)
            await JS.InvokeVoidAsync("mapAPI.toggleLayerGroup", layer.Name, layer.Selected);

        else if (layer.Type == LayerType.Polygons)
            await JS.InvokeVoidAsync("mapAPI.toggleLayerGroup", LayerType.Polygons.ToString(), layer.Selected);

        else if (layer.Type == LayerType.Objects)
            await MapLogic.RefreshObjectsOnMap(false);

        await JS.InvokeVoidAsync("mapAPI.setUrlParam", "layers", MapState.GetLayersForUrlParameter());
        StateHasChanged();
    }
}