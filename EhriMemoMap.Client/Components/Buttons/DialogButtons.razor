@inject DialogService DialogService
@inject IJSRuntime JS
@inject MapStateService MapState

@{
    var buttonStyle = "z-index:2000;position:fixed;background-color:var(--Beige-LIGHT);width:" + (MapState.IsMobileView ? "100%" : MapState.WidthOfDialogPercent);
}

<RadzenRow JustifyContent="JustifyContent.End" Style="@buttonStyle">
    @if (MapState.IsMobileView && MapState.DialogType != DialogTypeEnum.Help)
    {
        <RadzenButton Click=OnFullscreen Icon="fullscreen" ButtonStyle="ButtonStyle.Light" Variant="Variant.Flat" />
    }
    <RadzenButton Click=OnClose Icon="close" ButtonStyle="ButtonStyle.Light" Variant="Variant.Flat" />
</RadzenRow>

@code {

    private async Task OnClose()
    {
        MapState.IsDialogFullScreen = false;
        await JS.InvokeVoidAsync("mapAPI.removeAdditionalObjects");
        DialogService.CloseSide(MapState.DialogType);
        await MapState.ToggleDialog(DialogTypeEnum.None);
        await JS.InvokeVoidAsync("mapAPI.fitMapToWindow");
        await JS.InvokeVoidAsync("mapAPI.unselectAllSelectedPoints");

        
    }

    private async Task OnFullscreen()
    {
        MapState.IsDialogFullScreen = !MapState.IsDialogFullScreen;
        await JS.InvokeVoidAsync("mapAPI.setDialogFullScreen", MapState.IsDialogFullScreen);
        MapState.NotifyStateChanged();
    }
}