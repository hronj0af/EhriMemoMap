@inject IStringLocalizer<CommonResources> cl
@inject MapStateService MapState
@inject MapLogicService MapLogic
@inject IJSRuntime JSRuntime

<DialogButtons />

<div style="padding:2.5rem 2.5rem 0 2.5rem;">
    @if (Victim != null)
    {
        <h3>@Victim.Label</h3>


        @if (Victim.Places != null)
        {
            <hr />
            <ul>
                @* místo narození, bydliště k 13. květnu 1939, poslední bydliště před deportací *@
                @foreach (var place in Victim.Places.Where(a => new long?[] { 22, 24, 26 }.Contains(a.Type)) ?? [])
                {
                    <li>
                        @(CultureInfo.CurrentCulture.Name == "en-US" ? place.TypeEn : place.TypeCs):
                        @(CultureInfo.CurrentCulture.Name == "en-US" ? place.En : place.Cs)
                    </li>
                }

                @* deportace *@
                @if (Victim.Transports != null && Victim.Transports.Count() > 0)
                {
                    <li>
                        @cl["deportation"]:
                        <ul>
                            @foreach (var transport in Victim.Transports)
                            {
                                <li>
                                    @transport.Code
                                    (@transport.Date?.ToString("d. M. yyyy"),
                                    @(CultureInfo.CurrentCulture.Name == "en-US" ? transport.FromEn : transport.FromCs)
                                    →
                                    @(CultureInfo.CurrentCulture.Name == "en-US" ? transport.ToEn : transport.ToCs))
                                </li>
                            }
                        </ul>
                    </li>

                }
                @* místo věznění *@
                @if (Victim.Places.Any(a => a.Type == 28))
                {
                    <li>
                        @(CultureInfo.CurrentCulture.Name == "en-US"
                            ? Victim.Places.FirstOrDefault(a => a.Type == 28)?.TypeEn
                            : Victim.Places.FirstOrDefault(a => a.Type == 28)?.TypeCs):

                        @(CultureInfo.CurrentCulture.Name == "en-US"
                            ? Victim.Places.Where(a => a.Type == 28).Select(a => a.En).Aggregate((x, y) => x + ", " + y)
                            : Victim.Places.Where(a => a.Type == 28).Select(a => a.Cs).Aggregate((x, y) => x + ", " + y))
                    </li>
                }

                @* osud úmrtí *@
                <li>
                    @cl["fate"]: @(CultureInfo.CurrentCulture.Name == "en-US" ? Victim.FateEn : Victim.FateCs)
                    @Victim.DeathDate?.ToString("d. M. yyyy")
                    @if (Victim.Places.Any(a => a.Type == 23))
                    {
                        @(CultureInfo.CurrentCulture.Name == "en-US"
                            ? Victim.Places.FirstOrDefault(a => a.Type == 30)?.TypeEn
                            : Victim.Places.FirstOrDefault(a => a.Type == 30)?.TypeCs)
                    }
                </li>
            </ul>
        }

        @if (Victim.RelatedPersons != null && Victim.RelatedPersons.Count() > 0)
        {
            // „Nejbližší rodina“, omezeno na vztahy „manžel“ (id 5), „manželka“ (id 6), „otec“ (id 9), „matka“ (id 7), „syn“ (id 13), „dcera (id 3)“, „bratr“ (id 2), „sestra (id 10)“.
            if (Victim.RelatedPersons.Any(a => new long?[] { 2, 3, 5, 6, 7, 9, 10, 13 }.Contains(a.RelationshipToPersonType)))
            {
                <br />
                <h4>@cl["relatedClosestFamily"]</h4>
                <hr />
                <RadzenRow class="rz-mt-8" Gap="1rem" RowGap="2rem" JustifyContent=JustifyContent.Start>
                    @foreach (var relatedPerson in Victim.RelatedPersons.Where(a => new long?[] { 2, 3, 5, 6, 7, 9, 10, 13 }.Contains(a.RelationshipToPersonType)) ?? [])
                    {
                        <VictimShortInfo Victim="@relatedPerson" Small="true" Relative="true" />
                    }
                </RadzenRow>

            }


            // ostatní příbuzní
            if (Victim.RelatedPersons.Any(a => !new long?[] { 2, 3, 5, 6, 7, 9, 10, 13 }.Contains(a.RelationshipToPersonType)))
            {
                <br />
                <div style="cursor:pointer;" onclick="@(() => ToggleRelatives())">
                    <h4>
                        @cl["relatedOtherRelatives"]
                        &nbsp;&nbsp;
                        @if (!RelativesOpen)
                        {
                            <RadzenImage Style="height:17px;cursor:pointer" Path="images/arrow-right.png" title="@(cl["showOtherRelatives"] + "...")"></RadzenImage>
                        }
                        else
                        {
                            <RadzenImage Style="width:17px;cursor:pointer" Path="images/arrow-down.png" title="@(cl["hideOtherRelatives"] + "...")"></RadzenImage>
                        }
                    </h4>
                </div>

                <hr />

                @if (RelativesOpen)
                {
                    <RadzenRow class="rz-mt-8" Gap="1rem" RowGap="2rem" JustifyContent=JustifyContent.Start>
                        @foreach (var relatedPerson in Victim.RelatedPersons.Where(a => !new long?[] { 2, 3, 5, 6, 7, 9, 10, 13 }.Contains(a.RelationshipToPersonType)) ?? [])
                        {
                            <VictimShortInfo Victim="@relatedPerson" Small="true" Relative="true"/>
                        }
                    </RadzenRow>
                }
            }
        }

        <DocumentGallery Documents="Victim.Documents" />

    }
</div>

@code {
    [Parameter]
    public long? Id { get; set; }

    private VictimLongInfoModel? Victim { get; set; }

    private bool RelativesOpen = false;

    protected override async Task OnParametersSetAsync()
    {
        if (Id == null)
            return;

        Victim = await MapLogic.GetVictimLongInfo(Id);
    }

    private void ToggleRelatives()
    {
        RelativesOpen = !RelativesOpen;
        StateHasChanged();
    }

    // public async Task OnAddressClick(long id)
    // {
    //     await MapState.ShowVictimInfo(Victim?.Id);
    // }

}
