@inject IStringLocalizer<CommonResources> cl
@inject MapStateService MapState
@inject MapLogicService MapLogic
@inject IJSRuntime JSRuntime

<DialogButtons />

<div style="padding:2.5rem 2.5rem 0 2.5rem;">
    @if (Victim != null)
    {
        <RadzenCard class="victim-card rz-mb-4">
            <RadzenStack Orientation="Orientation.Vertical" AlignItems="AlignItems.Start" Gap="5px">
                <h4>@Victim.Label</h4>

                @if (Victim.RelatedPersons != null && Victim.RelatedPersons.Count() > 0)
                {
                    <h5>@cl["relatedPersons"]</h5>
                    <RadzenRow class="rz-mt-8" Gap="1rem" RowGap="2rem" JustifyContent=JustifyContent.Start>
                        @foreach (var relatedPerson in Victim.RelatedPersons ?? [])
                        {
                            <VictimShortInfo Victim="@relatedPerson" />
                        }
                    </RadzenRow>
                    <hr />
                }
            </RadzenStack>
        </RadzenCard>
        @if (Victim.Documents != null && Victim.Documents.Count() > 0)
        {
            <h5>@cl["relatedDocuments"]</h5>
            <div id="documents">
                <RadzenRow class="rz-mt-2 rz-mb-4">
                    @foreach (var doc in Victim.Documents)
                    {
                        foreach (var url in doc.Url ?? [])
                        {
                            <RadzenColumn Size="MapState.IsMobileView ? 3 : 2">
                                <RadzenCard class="document-card" title="@(CultureInfo.CurrentCulture.ToString() == "cs-CZ" ? doc.LabelCs : doc.LabelEn)">
                                    <RadzenStack Orientation="Orientation.Vertical" AlignItems="AlignItems.Start" Gap="5px">
                                        <div style="position:relative;width:100%">
                                            <RadzenImage class="document-photo" alt="@doc.GetTitle(CultureInfo.CurrentCulture.ToString())" Path="@url" />
                                        </div>
                                    </RadzenStack>
                                </RadzenCard>
                            </RadzenColumn>
                        }
                    }
                </RadzenRow>
            </div>

            <hr />


        }

        @if (Victim.Places != null && Victim.Places.Count() > 0)
        {
            <h5>@cl["relatedAddresses"]</h5>
            <ul>
                @foreach (var place in Victim.Places ?? [])
                {
                    <li>
                        @place.Cs | @place.TypeCs
                    </li>
                }
            </ul>
        }
    }
</div>

@code {
    [Parameter]
    public long? Id { get; set; }

    private VictimLongInfoModel? Victim { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        if (Id == null)
            return;

        Victim = await MapLogic.GetVictimLongInfo(Id);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender)
        {
            await JSRuntime.InvokeVoidAsync("initGallery");
        }
    }

    // public async Task OnAddressClick(long id)
    // {
    //     await MapState.ShowVictimInfo(Victim?.Id);
    // }

}
