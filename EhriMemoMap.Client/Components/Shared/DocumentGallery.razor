@inject IStringLocalizer<CommonResources> cl
@inject MapStateService MapState
@inject MapLogicService MapLogic
@inject IJSRuntime JSRuntime
@using System.Text.Json
@using System.IO
@using System.Globalization

@if (Documents != null && Documents.Count() > 0)
{
    <br />
    @if (ShowTitle)
    {
        <h4>@cl["relatedDocuments"]</h4>
        <hr />
    }
    <div id="documents_@(guid)">
        <RadzenRow class="rz-mt-2 rz-mb-4">
            @{
                var documentIndex = 0;
            }
            @foreach (var doc in Documents)
            {
                long actIndex = doc.Id;
                var currentDocumentIndex = documentIndex; // Lokální kopie pro tento iteration
                documentIndex += 1;

                <RadzenColumn Size="MapState.IsMobileView ? 3 : 2">
                    <RadzenCard class="document-card" title="@(CultureInfo.CurrentCulture.ToString() == "cs-CZ" ? doc.LabelCs : doc.LabelEn)">
                        <RadzenStack Orientation="Orientation.Vertical" AlignItems="AlignItems.Start" Gap="5px">
                            <div style="position:relative;width:100%">
                                @{
                                    var docTb = @doc.Url?.FirstOrDefault()?.ThumbnailUrl ?? @doc.Url?.FirstOrDefault()?.Url;
                                }
                                <RadzenImage style="cursor:pointer" class="document-photo" alt="@doc.GetTitle(CultureInfo.CurrentCulture.ToString())" Path="@docTb" onclick="@(() => ShowImage(actIndex, currentDocumentIndex))" />
                            </div>

                            <!-- Hidden container used by BiggerPicture -->
                            <div id="documents_@actIndex" style="display:none;">
                                @if (doc.Url != null)
                                {
                                    if (doc.Type == "image")
                                    {
                                        foreach (var url in doc.Url)
                                        {
                                            <a 
                                               data-img="@url.Url"
                                               data-caption="@doc.GetTitle(CultureInfo.CurrentCulture.ToString())"
                                               data-alt="@doc.GetTitle(CultureInfo.CurrentCulture.ToString())">
                                                @* <img src="@url.Url" alt="@doc.GetTitle(CultureInfo.CurrentCulture.ToString())" /> *@
                                            </a>
                                        }
                                    }
                                    else
                                    {
                                        // One anchor per video (keeps parity with previous behavior)
                                        foreach (var url in doc.Url)
                                        {
                                            var sourcesJson = GetSourcesJson(url);
                                            <a href="@url.Url"
                                               data-sources="@sourcesJson">
                                            </a>
                                        }
                                    }
                                }
                            </div>
                        </RadzenStack>
                    </RadzenCard>
                </RadzenColumn>
            }
        </RadzenRow>
    </div>
}

@code {
    [Parameter]
    public Document[]? Documents { get; set; }

    [Parameter]
    public bool ShowTitle { get; set; } = true;

    private string guid = Guid.NewGuid().ToString();

    private async Task ShowImage(long imageNumber, int documentIndex)
    {
        if (Documents?.Any(a => a.Url?.Length > 1) ?? false)
            await JSRuntime.InvokeVoidAsync("initGallery", imageNumber, 0);
        else
            await JSRuntime.InvokeVoidAsync("initGallery", guid, documentIndex);
    }

    private static string GetSourcesJson(OmekaUrl? url)
    {
        if (url == null) return "[]";
        var items = new[] { new { src = url.Url, type = GetMimeTypeFromUrl(url.Url) } };
        return System.Text.Json.JsonSerializer.Serialize(items);
    }

    private static string GetMimeTypeFromUrl(string url)
    {
        var ext = Path.GetExtension(url)?.ToLowerInvariant();
        return ext switch
        {
            ".webm" => "video/webm",
            ".mp4" => "video/mp4",
            ".mp3" => "audio/mp3",
            ".ogv" or ".ogg" => "video/ogg",
            _ => "video/mp4"
        };
    }
}